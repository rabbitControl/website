{"version":3,"sources":["ElementWrapper.tsx","ParameterButton.tsx","ParameterCheckbox.tsx","ParameterColorInput.tsx","ParameterFoldableGroup.tsx","ParameterHTMLSelect.tsx","ParameterNumberInput.tsx","ParameterSlider.tsx","ParameterTextInput.tsx","ParameterTextWithLabel.tsx","ParameterSlider3.tsx","ParameterNumberInput3.tsx","ParameterSlider2.tsx","ParameterNumberInput2.tsx","ParameterSlider4.tsx","ParameterNumberInput4.tsx","ParameterRangeSlider.tsx","ParameterTabsGroup.tsx","ParameterRadio.tsx","ParameterWidget.tsx","Globals.ts","ConnectionDialog.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["parameterWrapped","config","Component","_class","_temp","_React$Component","ParameterComponentWrapper","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","ignoreReadonly","undefined","handleValue","value","param","state","parameter","ValueParameter","onSubmitCb","BangParameter","doBang","setState","handleParameterValueChange","App","VERBOSE_LOG","console","log","concat","userid","handleParameterChange","label","description","readonly","inherits","createClass","key","registerElement","unregisterParameterHandlers","unregisterElement","registerParameterHandlers","error","react","assign","disabled","addValueChangeListener","addChangeListener","removeValueChangedListener","removeChangedListener","React","displayName","name","ParameterButtonC","handleClick","event","confirmation","widget","needsConfirmation","handleDialogOpen","doSendBang","isOpen","handleDialogConfirm","handleDialogCancel","ld","labelDisabled","_this$props","filteredProps","objectWithoutProperties","buttons","style","whiteSpace","text","onClick","alert_alert","className","canEscapeKeyCancel","cancelButtonText","confirmButtonText","icon","intent","Intent","DANGER","onCancel","onConfirm","confirmationText","ParameterCheckboxC","handleChange","target","checked","readOnly","controls","onChange","alignIndicator","Position","LEFT","large","ParameterColorInputC","RGBAParameter","length","handleSubmit","preventDefault","setStringValue","substr","inputGroup","type","ParameterFoldableGroupC","onSubmit","handleButtonClick","_this2","children","sort","a","b","order","map","p","ParameterWidget_ParameterWidget","id","controlGroup","marginBottom","vertical","marginLeft","text_text","collapse","renderChildren","COMPONENT_DEFAULT_COLOR","Colors","GRAY1","ParameterHTMLSelectC","entries","EnumParameter","enumDefinition","htmlSelect","renderOptions","sel","e","ParameterNumericInputC","valueAsString","step","isFloat","NONE","numdef","typeDefinition","min","typeMin","max","typeMax","datatype","RcpTypes","Datatype","FLOAT32","FLOAT64","minimum","maximum","multipleof","numericInput","stepSize","minorStepSize","onValueChange","selectAllOnFocus","buttonPosition","RIGHT","placeholder","ParameterSliderC","continuous","handleRelease","renderLabel","val","unit","toFixed","dimensions","width","height","valueRange","react_measure_default","onResize","contentRect","entry","_ref","measureRef","ref","slider","labelPrecision","labelStepSize","onRelease","labelRenderer","ParameterTextInputC","ParameterTextWithLabelC","defaultValue","NumberParameter","td","fixedNumber","display","flexDirection","justifyContent","alignItems","margin","labelWidth","color","LIGHT_GRAY5","background","DARK_GRAY1","flex","flexGrow","ParameterSlider3C","handleChangeX","vec3","clone","x","handleChangeY","y","handleChangeZ","z","Vector3","sub","VECTOR2F32","VECTOR3F32","VECTOR4F32","ParameterNumericInput3C","vec","ParameterSlider2C","Vector2","ParameterNumericInput2C","ParameterSlider4C","handleChangeT","t","Vector4","ParameterNumericInput4C","ParameterRangeSliderC","Range","element_type","elementType","rangeSlider","value1","value2","ParameterTabsGroupC","handleTabChange","navbarTabId","TabsWidget","filter","is_group","GroupParameter","is_tabs","parent_tabs","parent","_this3","_this4","index","g_param","tab","title","panel","border","createChildWidgets","borderTop","tabs","renderActiveTabPanelOnly","selectedTabId","createTabWidgets","ParameterRadioC","multiselect","radioGroup","selectedValue","ParameterWidget","getWidth","handleValueChange","handleValueSubmit","valueConstrained","setDirty","enabled","SliderWidget","NumberboxWidget","ParameterNumberInput_ParameterNumericInputC","ParameterSlider_ParameterSliderC","defaultWidget","Vector2F32Parameter","Vector2I32Parameter","def","ParameterNumberInput2_ParameterNumericInput2C","ParameterSlider2_ParameterSlider2C","Vector3F32Parameter","Vector3I32Parameter","ParameterNumberInput3_ParameterNumericInput3C","ParameterSlider3_ParameterSlider3C","Vector4F32Parameter","Vector4I32Parameter","ParameterNumberInput4_ParameterNumericInput4C","ParameterSlider4_ParameterSlider4C","BooleanParameter","ParameterCheckbox_ParameterCheckboxC","RGBParameter","ParameterColorInput_ParameterColorInputC","RadiobuttonWidget","ParameterRadio_ParameterRadioC","ParameterHTMLSelect_ParameterHTMLSelectC","ImageParameter","blob","Blob","url","window","URL","createObjectURL","src","alt","RangeParameter","ParameterRangeSlider_ParameterRangeSliderC","ParameterTextInput_ParameterTextInputC","ParameterButton_ParameterButtonC","ParameterTabsGroup_ParameterTabsGroupC","ListWidget","ListPageWidget","ParameterFoldableGroup_ParameterFoldableGroupC","renderValue","DARK_GRAY3","ParameterTextWithLabel_ParameterTextWithLabelC","toString","SSL_INFO_TEXT","ConnectionDialog","rootParam","componentDidMount","location","hash","_location$hash$replac","replace","split","_location$hash$replac2","slicedToArray","host","port","portAsInt","parseInt","doConnect","updateClient","client","update","setHost","currentTarget","setPort","setTabsInRoot","rootWithTabs","handleAlertConfirm","doDisconnect","connected","disconnected","onError","parameterAdded","parameterRemoved","dispose","resetUI","isNaN","Client","WebSocketClientTransporter","_assertThisInitialize","assertThisInitialized","onServerInfo","connect","isConnected","JSON","stringify","reason","Error","message","version","applicationId","serverVersion","serverApplicationId","parameterChangeListener","onlyValueChanged","parentChanged","parameters","forceUpdate","addTimer","clearTimeout","setTimeout","removeFromParent","removeTimer","VERBOSE","createParameterWidget","createWidgets","returnSSLInfo","isSSL","document","startsWith","isFirefox","navigator","userAgent","indexOf","stopTimers","onWindowResize","innerHeight","addEventListener","removeEventListener","react_default","createElement","minHeight","ConnectionDialog_ConnectionDialog","textDecoration","href","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.929f92ea.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Parameter, ValueParameter } from 'rabbitcontrol';\nimport {BangParameter} from 'rabbitcontrol';\nimport App from './App';\n\ninterface ExternalProps {\n    label: string;\n    userid: string;\n    registerElement: (element:RegisterCB) => void;\n    unregisterElement: (element:RegisterCB) => void;\n    onSubmitCb: () => void;\n}\n\nexport interface InjectedProps {\n    value: any;\n    parameter?: Parameter;\n    disabled?: boolean;    \n    handleValue?: (value: any) => void;\n    onSubmitCb?: () => void;\n}\n\ntype State = {\n    parameter?: Parameter;\n    label?: string;\n    description?: string;\n    value: any;\n    readonly?: boolean;\n};\n\n\nexport interface RegisterCB {\n    setParameter(parameter: Parameter): void;\n    removeParameter(parameter: Parameter): void;\n    getUserid(): string;\n}\n\n\ninterface Config {\n    ignoreReadonly?: boolean;\n};\n\nexport const parameterWrapped = (config?: Config) =>\n    <TOriginalProps extends {}>(\n        Component: (React.ComponentClass<TOriginalProps & InjectedProps>\n                  | React.StatelessComponent<TOriginalProps & InjectedProps>)\n    ) => {\n\n        type ResultProps = TOriginalProps & ExternalProps;\n\n        const result = class ParameterComponentWrapper extends React.Component<ResultProps, State> implements RegisterCB {\n            \n            static displayName = `ParameterComponentWrapper(${Component.displayName || Component.name})`;\n            private ignoreReadonly = config ? config.ignoreReadonly : undefined;\n\n            constructor(props: ResultProps) {\n                super(props);\n                this.state = {\n                    label: this.props.label,\n                    value: null,\n                    parameter: undefined,            \n                };\n            }\n\n            // override\n            componentDidMount() {\n                this.props.registerElement(this);\n            }\n\n            // override\n            componentWillUnmount() {\n                const param = this.state.parameter;\n                if (param) {\n                    this.unregisterParameterHandlers(param);\n                }\n        \n                this.props.unregisterElement(this);\n            }\n\n            /**\n             * RegisterCB interface\n             * \n             * @param parameter \n             */\n            setParameter(parameter: Parameter): void {\n\n                if (parameter.userid !== this.props.userid) {\n                    console.error(`userid mismatch! parameter: ${parameter.userid} - widget: ${this.props.userid}`);\n                    return;\n                }\n\n                if (App.VERBOSE_LOG) {\n                    console.log(`set parameter for widget (${this.props.userid})`);\n                }\n\n                this.registerParameterHandlers(parameter);\n                this.setState({\n                    parameter: parameter,\n                    label: parameter.label,\n                    readonly: parameter.readonly,\n                });\n            }\n\n            removeParameter(param: Parameter): void {\n                this.unregisterParameterHandlers(param);\n                this.setState({\n                    parameter: undefined,\n                });\n            }\n\n            getUserid(): string {\n                return this.props.userid;\n            }\n\n            /**\n             * handle value\n             */\n            handleValue = (value: any) => {\n                const param = this.state.parameter;\n                if (param instanceof ValueParameter) {\n                    param.value = value;\n                    this.props.onSubmitCb();\n                } else if (param instanceof BangParameter) {\n                    param.doBang();\n                    this.props.onSubmitCb();\n                }\n\n                this.setState({\n                    value: value,\n                })\n            };\n\n            // --------------------------------------------\n            // render\n            // --------------------------------------------\n            render(): JSX.Element {\n\n                const param = this.state.parameter;\n                const readonly = this.state.readonly;\n\n                return (\n                        <Component\n                            {...this.props} \n                            {...this.state} \n                            handleValue={this.handleValue}\n                            disabled={param ? (readonly ? (!(this.ignoreReadonly === true)) : false) : true}\n                        />\n                );\n            }\n\n\n            // --------------------------------------------\n            // --------------------------------------------\n            private handleParameterValueChange = (parameter: Parameter) => {\n\n                if (parameter instanceof ValueParameter) {\n\n                    if (App.VERBOSE_LOG) {\n                        console.log(`setting widget value (${parameter.userid}): ${parameter.value as string}`);                \n                    }\n\n                    this.setState({\n                        value: parameter.value\n                    });\n                }\n            }\n        \n            private handleParameterChange = (parameter: Parameter) => {\n                this.setState({\n                    label: parameter.label,\n                    description: parameter.description,\n                    readonly: parameter.readonly,\n                });\n            }\n        \n            private registerParameterHandlers(parameter: Parameter) {\n\n                if (parameter instanceof ValueParameter) {                    \n                    parameter.addValueChangeListener(this.handleParameterValueChange);                    \n                    this.setState({                        \n                        value: parameter.value,\n                    });\n                }\n        \n                parameter.addChangeListener(this.handleParameterChange); \n            }\n        \n            private unregisterParameterHandlers(parameter: Parameter) {\n                if (parameter instanceof ValueParameter) {\n                    parameter.removeValueChangedListener(this.handleParameterValueChange);\n                }\n                \n                parameter.removeChangedListener(this.handleParameterChange);\n            }\n        };\n\n        return result;\n    };\n\n","import * as React from 'react';\nimport { InjectedProps, parameterWrapped } from './ElementWrapper';\nimport { Button, Intent, Alert, IButtonProps } from '@blueprintjs/core';\n\ninterface Props extends IButtonProps {\n    className?: string;\n    label?: string;\n    labelDisabled?: boolean;\n    confirmationText?: string;\n};\n\ntype State = {\n    isOpen: boolean;\n};\n\nexport class ParameterButtonC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n            isOpen: false,\n        };\n    }\n    \n    handleClick = (event: React.MouseEvent<HTMLElement>) => {\n\n        const parameter = this.props.parameter;\n        let confirmation = false;\n\n        if (parameter && parameter.widget) {\n            confirmation = parameter.widget.needsConfirmation ? true : false;\n        }\n\n        if (confirmation) {\n            // open dialog\n            this.handleDialogOpen();\n        } else {\n            // directly send\n            this.doSendBang();        \n        }\n    }\n\n    render() {\n\n        const ld = this.props.labelDisabled;\n        let label = this.props.label;\n\n        if (this.props.parameter) {\n            label = this.props.parameter.label;\n        }\n\n        const { onSubmitCb, handleValue, ...filteredProps } = this.props;\n\n        return (\n            <section>\n                <Button style={{whiteSpace: \"nowrap\", }}\n                    {...filteredProps}\n                    text={ld ? \"\" : label}\n                    onClick={this.handleClick}\n                />\n\n                <Alert\n                    className={`bp3-dark ${this.props.className}`}\n                    canEscapeKeyCancel={true}\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Send\"\n                    icon=\"warning-sign\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.isOpen}\n                    onCancel={this.handleDialogCancel}\n                    onConfirm={this.handleDialogConfirm}\n                >\n                    <p>\n                        {this.props.confirmationText ? this.props.confirmationText : `text ${label}?`}\n                        <br/>\n                        {(this.props.parameter && this.props.parameter.description) ? `(${this.props.parameter.description})` : \"\"}\n                    </p>\n                </Alert>\n            </section>\n        );\n\n    }\n\n    private handleDialogOpen = () => this.setState({ isOpen: true });\n    private handleDialogConfirm = () => {\n        this.setState({ isOpen: false });\n        this.doSendBang();\n    };\n    private handleDialogCancel = () => this.setState({ isOpen: false });\n\n    private doSendBang() {\n        if (this.props.handleValue) {\n            this.props.handleValue(null);\n        }\n    }\n};\n\nexport const ParameterButton = parameterWrapped()(ParameterButtonC);\n","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { INumericInputProps, Position, Checkbox } from '@blueprintjs/core';\n\ninterface Props extends INumericInputProps {\n};\n\ninterface State {\n};\n\nexport class ParameterCheckboxC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {        \n        };\n    }    \n\n    handleChange = (event: React.FormEvent<HTMLElement>) => {\n\n        if (this.props.handleValue) {\n            this.props.handleValue((event.target as HTMLInputElement).checked);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as boolean;    \n        let readOnly:boolean|undefined;\n\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;        \n        }\n\n        const { onSubmitCb, handleValue, ...filteredProps } = this.props;\n\n        return (\n            <Checkbox\n                {...filteredProps}\n                checked={value ? value : false}\n                onChange={this.handleChange}\n                disabled={readOnly === true}\n                alignIndicator={Position.LEFT}\n                large={true}\n            />      \n        );\n    }\n};\n\nexport const ParameterCheckbox = parameterWrapped()(ParameterCheckboxC);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { INumericInputProps, InputGroup } from '@blueprintjs/core';\nimport { ValueParameter, RGBAParameter } from 'rabbitcontrol';\n\ninterface Props extends INumericInputProps {\n};\n\ninterface State {\n};\n\nexport class ParameterColorInputC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {        \n        };\n    }    \n\n    handleChange = (event: React.FormEvent<HTMLElement>) => {\n\n        if (this.props.handleValue) {\n            let value = (event.target as HTMLInputElement).value;\n\n            // we only can handle RGB values, add alpha if needed\n            if (this.props.parameter instanceof RGBAParameter) {\n                while (value.length < 9) {\n                    value += \"f\";\n                }\n            }\n            this.props.handleValue(value);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n    \n    handleSubmit = (event: any) => {\n        \n        if (event && event.preventDefault) {\n            event.preventDefault();\n        }\n\n        if (this.props.parameter instanceof ValueParameter) {\n            if (this.props.parameter.setStringValue(this.props.value)) {\n                if (this.props.onSubmitCb) {\n                    this.props.onSubmitCb();\n                }\n            } else {\n                console.error(\"could not set stringvalue...\");\n            }\n        }\n    }\n\n    render() {\n        let value = this.props.value as string;\n        let readOnly:boolean|undefined;\n\n        // we only can handle RGB values\n        if (value.length > 7) {\n            value = value.substr(0, 7);\n        }\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;            \n        }\n\n        const { onSubmitCb, handleValue, ...filteredProps } = this.props;\n\n        return (     \n            <InputGroup\n                {...filteredProps}\n                value={value}\n                type=\"color\"\n                onChange={this.handleChange}\n                disabled={readOnly === true}\n            />     \n        );\n    }\n    \n};\n\nexport const ParameterColorInput = parameterWrapped()(ParameterColorInputC);","import * as React from 'react';\nimport { InjectedProps, parameterWrapped } from './ElementWrapper';\nimport { Colors, Text, Collapse, ControlGroup, Icon } from '@blueprintjs/core';\nimport { GroupParameter, Parameter } from 'rabbitcontrol';\nimport ParameterWidget from './ParameterWidget';\n\ninterface Props {\n    style?: React.CSSProperties;\n};\n\ninterface State {\n    isOpen: boolean;\n};\n\nexport class ParameterFoldableGroupC extends React.Component<Props & InjectedProps, State> {\n\n    static readonly COMPONENT_DEFAULT_COLOR = Colors.GRAY1;\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n            isOpen: false,\n        };\n    } \n\n    onSubmit = () =>\n    {\n        if (this.props.onSubmitCb)\n        {\n            this.props.onSubmitCb();\n        }\n    }\n\n    renderChildren()\n    {\n        const parameter = this.props.parameter;\n\n        if (parameter === undefined)\n        {\n            return (\"\");\n        }\n\n        return (parameter as GroupParameter).children\n            .sort((a: Parameter, b: Parameter): number => \n            {\n                return ((a.order || 0) - (b.order || 0));\n            }).\n            map( (p) => { \n                return (\n                    <ParameterWidget \n                        key={p.id}\n                        parameter={p} \n                        onSubmitCb={this.onSubmit}\n                    />\n                );\n            });\n    }\n    \n    render()\n    {\n        let label = \"no label\";\n        const param = this.props.parameter;\n        if (param && param.label !== undefined) {\n            label = param.label;\n        }\n\n        return (\n            <div style={this.props.style}>\n                <ControlGroup \n                    style={{marginBottom: this.state.isOpen ? 5 : 0}}\n                    vertical={false} \n                    onClick={this.handleButtonClick}\n                >\n                    <Icon icon={this.state.isOpen ? \"remove\" : \"add\"}/>\n                    <div style={{marginLeft: 10}}/>\n                    <Text>{label}</Text>\n                </ControlGroup>\n                <Collapse isOpen={this.state.isOpen}>\n                    {this.renderChildren()}\n                </Collapse>\n            </div>\n        );\n    }\n\n    private handleButtonClick = () => {\n        this.setState({\n            isOpen: !this.state.isOpen,\n        });\n    }\n};\n\nexport const ParameterFoldableGroup = parameterWrapped({ignoreReadonly: true})(ParameterFoldableGroupC);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { INumericInputProps, HTMLSelect } from '@blueprintjs/core';\nimport { EnumParameter } from 'rabbitcontrol';\n\ninterface Props extends INumericInputProps {\n};\n\ninterface State {\n};\n\nexport class ParameterHTMLSelectC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);    \n    }    \n\n    handleChange = (event: React.FormEvent<HTMLElement>) => {\n\n        if (this.props.handleValue) {\n            this.props.handleValue((event.target as HTMLInputElement).value);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as string;    \n        let readOnly:boolean|undefined;\n        let entries:string[]|undefined;\n        let multiSelect:boolean|undefined;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;\n        }\n\n        if (param instanceof EnumParameter) {\n            entries = param.enumDefinition.entries;\n        }\n\n        const { onSubmitCb, handleValue, ...filteredProps } = this.props;\n\n        return (\n            <HTMLSelect\n                {...filteredProps}\n                onChange={this.handleChange}\n                disabled={readOnly === true}\n                className=\"test\"\n            >\n                {this.renderOptions(value, entries)}            \n            </HTMLSelect>      \n        );\n    }\n\n    private renderOptions(sel: string, entries?: string[]) {\n        if (entries) {\n            return entries.map( e => \n                { \n                    return <option \n                            {...e === sel ? \"selected\": null} \n                            key={e} \n                            value={e}>\n                                {e}\n                            </option>\n                });\n        }\n    }\n};\n\nexport const ParameterHTMLSelect = parameterWrapped()(ParameterHTMLSelectC);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { NumericInput, INumericInputProps, Position, Intent } from '@blueprintjs/core';\nimport { NumberDefinition, RcpTypes } from 'rabbitcontrol';\n\ninterface Props extends INumericInputProps {\n};\n\ninterface State {\n};\n\nexport class ParameterNumericInputC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {        \n        };\n    }    \n\n    handleChange = (value: number, valueAsString: string) => {\n        if (this.props.handleValue) {\n            this.props.handleValue(value);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as number;\n        let step = 1;\n        let isFloat:boolean = false;        \n        let readOnly:boolean = false;\n        let intent:Intent = Intent.NONE;\n\n        const numdef = this.props.parameter ? this.props.parameter.typeDefinition as NumberDefinition : undefined;\n\n        let min:number|undefined = numdef ? numdef.typeMin() : undefined;\n        let max:number|undefined = numdef ? numdef.typeMax() : undefined;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly || false;\n            isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.FLOAT32 ||\n                    param.typeDefinition.datatype === RcpTypes.Datatype.FLOAT64;\n\n            if (numdef !== undefined) {\n\n                if (numdef.minimum !== undefined && \n                    numdef.maximum !== undefined)\n                {\n                    if (numdef.minimum < numdef.maximum) {\n                        min = numdef.minimum;\n                        max = numdef.maximum;\n                    } else {\n                        // error on min/max\n                        console.error(\"NumberInput: minimum >= maximum\");                \n                        intent = Intent.DANGER;\n                    }    \n                }\n\n                if (numdef.multipleof) {\n                    step = numdef.multipleof;\n                } else if (isFloat) {\n                    step = 0.1;\n                }\n            }\n        }\n\n        const { onSubmitCb, handleValue, ...filteredProps } = this.props;\n        \n        return (        \n            <NumericInput\n                {...filteredProps}\n                value={value ? value : 0}\n                min={min}\n                max={max}\n                stepSize={step}\n                minorStepSize={isFloat ? 0.1 : 1}\n                onValueChange={this.handleChange}\n                disabled={readOnly === true}\n                selectAllOnFocus={true}\n                buttonPosition={Position.RIGHT}\n                placeholder={\"-\"}\n                intent={intent}\n            />      \n        );\n    }\n};\n\nexport const ParameterNumericInput = parameterWrapped()(ParameterNumericInputC);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { Slider, ISliderProps } from '@blueprintjs/core';\nimport { NumberDefinition, RcpTypes } from 'rabbitcontrol';\nimport Measure from 'react-measure';\n\ninterface Props extends ISliderProps {\n    continuous?: boolean;\n};\n\ninterface State {\n    dimensions: {\n        width: -1,\n        height: -1\n    }; \n};\n\nexport class ParameterSliderC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n            dimensions: {\n                width: -1,\n                height: -1\n            },\n        };\n    }    \n\n    handleChange = (value: number) => {\n        if (this.props.handleValue) {\n            this.props.handleValue(value);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(value);\n        }\n    }\n\n    handleRelease = (value: number) => {\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as number;\n        let step = 1;\n        let isFloat:boolean = false;\n        let min:number|undefined = undefined;\n        let max:number|undefined = undefined;\n        let readOnly:boolean = false;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly || false;\n            const numdef = param.typeDefinition as NumberDefinition;\n            if (numdef !== undefined && \n                numdef.minimum !== undefined && \n                numdef.maximum !== undefined)\n            {\n                min = numdef.minimum;\n                max = numdef.maximum;\n\n                const valueRange = (numdef.maximum - numdef.minimum);                    \n                isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.FLOAT32 ||\n                                param.typeDefinition.datatype === RcpTypes.Datatype.FLOAT64;\n\n                if (numdef.multipleof) {\n                    step = numdef.multipleof;\n                } else if (isFloat) {\n                    if (this.state !== undefined && this.state.dimensions !== undefined) {                        \n                        step = valueRange > 0 && this.state.dimensions.width > 0 ? valueRange / this.state.dimensions.width : 1\n                    }\n                }\n            }\n        }\n\n        const { onSubmitCb, handleValue, ...filteredProps } = this.props;\n\n        return (        \n            <Measure\n                onResize={(contentRect) => {\n                    this.setState({ dimensions: contentRect.entry })\n                }}\n            >\n            {({ measureRef }) =>\n                <div ref={measureRef}>\n                    <Slider\n                        {...filteredProps}\n                        value={value ? value : 0}\n                        min={min}\n                        max={max}\n                        stepSize={step}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max}\n                        onChange={this.handleChange}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />      \n                </div>\n            }\n            </Measure>      \n        );\n    }\n\n    private renderLabel = (val: number) => {\n        const param = this.props.parameter\n        const value = val.toFixed(2);\n        let unit;\n        if (param) {\n            unit = (param.typeDefinition as NumberDefinition).unit\n        }\n\n        return <div style={{whiteSpace: \"nowrap\"}}>{unit ? `${value} ${unit}`: value}</div>\n    }\n};\n\nexport const ParameterSlider = parameterWrapped()(ParameterSliderC);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { InputGroup } from '@blueprintjs/core';\nimport { ValueParameter } from 'rabbitcontrol';\n\ninterface Props {\n};\n\ninterface State {\n};\n\nexport class ParameterTextInputC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {        \n        };\n    }    \n\n    handleChange = (event: React.FormEvent<HTMLElement>) => {\n\n        if (this.props.handleValue) {\n            this.props.handleValue((event.target as HTMLInputElement).value);\n        }\n    }\n    \n    handleSubmit = (event: any) => {\n        \n        if (event && event.preventDefault) {\n            event.preventDefault();\n        }\n\n        if (this.props.parameter instanceof ValueParameter) {\n            if (this.props.parameter.setStringValue(this.props.value)) {\n                if (this.props.onSubmitCb) {\n                    this.props.onSubmitCb();\n                }\n            } else {\n                console.error(\"could not set stringvalue...\");\n            }\n        }\n    }\n\n    render() {\n        const value = this.props.value as string;\n        let readOnly:boolean|undefined;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;            \n        }\n\n        const { onSubmitCb, handleValue, ...filteredProps } = this.props;\n\n        return (     \n            <form onSubmit={this.handleSubmit}>\n                <InputGroup\n                    {...filteredProps}\n                    value={value}\n                    onChange={this.handleChange}\n                    disabled={readOnly === true}\n                />  \n            </form>    \n        );\n    }\n    \n};\n\nexport const ParameterTextInput = parameterWrapped()(ParameterTextInputC);","import * as React from 'react';\nimport { InjectedProps, parameterWrapped } from './ElementWrapper';\nimport { Colors } from '@blueprintjs/core';\nimport { NumberParameter } from 'rabbitcontrol';\nimport { NumberDefinition } from 'rabbitcontrol';\nimport { isBuffer } from 'util';\n\ninterface Props {\n    style?: React.CSSProperties;\n    label?: string;\n    labelDisabled?: boolean;\n    labelWidth?: number;\n    large?: boolean;\n    fixedNumber?: number;\n    defaultValue?: any;\n};\n\ninterface State {\n};\n\nexport class ParameterTextWithLabelC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n        };\n    }    \n\n    render() {\n\n        const param = this.props.parameter;\n        let unit = \"\";\n        let value = this.props.defaultValue;\n        let label = this.props.label;\n\n        if (param) {\n            label = param.label;\n        }\n        \n        if (this.props.value !== undefined && this.props.value !== null) {\n            value = this.props.value as string;\n        }\n\n        if (param instanceof NumberParameter) {\n            const td = (param.typeDefinition as NumberDefinition);\n\n            if (this.props.fixedNumber !== undefined) {\n                value = this.props.value.toFixed(this.props.fixedNumber) as string;\n            }\n\n            if (td.unit) {\n                unit = (param.typeDefinition as NumberDefinition).unit as string;\n                value += \" \" + unit;\n            }\n\n            if (td.maximum && td.minimum) {\n                if (param.value < td.minimum || param.value > td.maximum) {\n                    value = \"Err\";\n                }\n            }\n            \n        }\n\n        return (\n            \n            <section style={this.props.style}>\n                \n                <div style={{                    \n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"space-between\",\n                    alignItems: \"center\",\n                    margin: \"1px 0px 2px 0px\",\n                }}>\n\n                    <div style={{\n                        width: this.props.labelDisabled ? 0 : (this.props.labelWidth ? this.props.labelWidth : undefined),\n                        // fontSize: this.props.large ? \"large\" : \"normal\",\n                        color: this.props.disabled ? Colors.GRAY1 : Colors.LIGHT_GRAY5,\n                    }}>\n                        {this.props.labelDisabled ? \"\" : label}\n                    </div>\n\n\n                    <div style={{\n                        marginLeft: this.props.labelDisabled ? 0 : \"6px\",\n                        background: Colors.DARK_GRAY1,\n                        flex: \"content\",\n                        flexGrow: 1,\n                    }}>\n\n                        <div style={{\n                            margin: this.props.labelDisabled ? 0 : \"0px 0px 0px 6px\",\n                            // fontSize: this.props.large ? \"large\" : \"normal\",\n                            color: this.props.disabled ? Colors.GRAY1 : Colors.LIGHT_GRAY5,\n                            whiteSpace: \"nowrap\",\n                        }}>\n                            {value}\n                        </div>\n                    </div>\n\n                </div>\n\n            </section>\n        );\n    }\n};\n\nexport const ParameterTextWithLabel = parameterWrapped({ignoreReadonly:true})(ParameterTextWithLabelC);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { Slider, ISliderProps } from '@blueprintjs/core';\nimport { RcpTypes, Vector3, Vector3F32Definition } from 'rabbitcontrol';\nimport Measure from 'react-measure';\n\ninterface Props extends ISliderProps {\n    continuous?: boolean;\n};\n\ninterface State {\n    dimensions: {\n        width: -1,\n        height: -1\n    }; \n};\n\nexport class ParameterSlider3C extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n            dimensions: {\n                width: -1,\n                height: -1\n            },\n        };\n    }    \n\n    handleChangeX = (value: number) => {\n\n        const vec3 = (this.props.value as Vector3).clone();\n        vec3.x = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec3);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(0);\n        }\n    }\n    handleChangeY = (value: number) => {\n\n        const vec3 = (this.props.value as Vector3).clone();\n        vec3.y = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec3);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(0);\n        }\n    }\n    handleChangeZ = (value: number) => {\n\n        const vec3 = (this.props.value as Vector3).clone();\n        vec3.z = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec3);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(0);\n        }\n    }\n\n    handleRelease = (value: number) => {\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as Vector3;\n        let step = new Vector3(1, 1, 1);\n        let isFloat:boolean = false;\n        let min:Vector3|undefined = undefined;\n        let max:Vector3|undefined = undefined;\n        let readOnly:boolean = false;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly || false;\n            const numdef = param.typeDefinition as Vector3F32Definition;\n            if (numdef !== undefined && \n                numdef.minimum !== undefined && \n                numdef.maximum !== undefined)\n            {\n                min = numdef.minimum;\n                max = numdef.maximum;\n\n                const valueRange = numdef.maximum.clone().sub(numdef.minimum);\n                    \n                isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR2F32 ||\n                                param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR3F32 ||\n                                param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR4F32;\n\n                if (numdef.multipleof) {\n                    step = numdef.multipleof;\n                } else if (isFloat) {\n                    if (this.state !== undefined && this.state.dimensions !== undefined) {                        \n                        step.x = valueRange.x > 0 && this.state.dimensions.width > 0 ? valueRange.x / this.state.dimensions.width : 1;\n                        step.y = valueRange.y > 0 && this.state.dimensions.width > 0 ? valueRange.y / this.state.dimensions.width : 1;\n                        step.z = valueRange.z > 0 && this.state.dimensions.width > 0 ? valueRange.z / this.state.dimensions.width : 1;\n                    }\n                }\n            }\n        }\n\n        const { onSubmitCb, handleValue, ...filteredProps } = this.props;\n\n        return (        \n            <Measure\n                onResize={(contentRect) => {\n                    this.setState({ dimensions: contentRect.entry })\n                }}\n            >\n            {({ measureRef }) =>\n                <div ref={measureRef}>\n                    <Slider\n                        {...filteredProps}\n                        value={value ? value.x : 0}\n                        min={min ? min.x : undefined}\n                        max={max ? max.x : undefined}\n                        stepSize={step.x}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max ? max.x : 0}\n                        onChange={this.handleChangeX}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />\n                    <Slider\n                        {...filteredProps}\n                        value={value ? value.y : 0}\n                        min={min ? min.y : undefined}\n                        max={max ? max.y : undefined}\n                        stepSize={step.y}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max ? max.y : 0}\n                        onChange={this.handleChangeY}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />\n                    <Slider\n                        {...filteredProps}\n                        value={value ? value.z : 0}\n                        min={min ? min.z : undefined}\n                        max={max ? max.z : undefined}\n                        stepSize={step.z}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max ? max.z : 0}\n                        onChange={this.handleChangeZ}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />      \n                </div>\n            }\n            </Measure>      \n        );\n    }\n\n    private renderLabel = (val: number) => {\n        const param = this.props.parameter\n        const value = val.toFixed(2); // fixme for small numbers!\n        let unit;\n        if (param) {\n            unit = (param.typeDefinition as Vector3F32Definition).unit\n        }\n        \n        return <div style={{whiteSpace: \"nowrap\"}}>{unit ? `${value} ${unit}`: value}</div>\n    }\n};\n\nexport const ParameterSlider3 = parameterWrapped()(ParameterSlider3C);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { NumericInput, INumericInputProps, Position, Intent } from '@blueprintjs/core';\nimport { RcpTypes, Vector3, Vector3F32Definition } from 'rabbitcontrol';\n\ninterface Props extends INumericInputProps {\n};\n\ninterface State {\n};\n\nexport class ParameterNumericInput3C extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {        \n        };\n    }    \n\n    handleChangeX = (value: number, valueAsString: string) => {\n\n        const vec = (this.props.value as Vector3).clone();\n        vec.x = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n    handleChangeY = (value: number, valueAsString: string) => {\n\n        const vec = (this.props.value as Vector3).clone();\n        vec.y = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n    handleChangeZ = (value: number, valueAsString: string) => {\n\n        const vec = (this.props.value as Vector3).clone();\n        vec.z = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as Vector3;\n        let step = new Vector3(1, 1, 1);\n        let isFloat:boolean = false;\n        let min:Vector3|undefined = undefined;\n        let max:Vector3|undefined = undefined; \n        let readOnly:boolean = false;\n        let intent:Intent = Intent.NONE;\n\n        const param = this.props.parameter;\n        if (param) {\n\n            readOnly = param.readonly || false;\n\n            isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR2F32 ||\n                        param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR3F32 ||\n                        param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR4F32;\n\n            const numdef = param.typeDefinition as Vector3F32Definition;\n\n            if (numdef !== undefined) {\n\n                if (numdef.minimum !== undefined && \n                    numdef.maximum !== undefined)\n                {\n\n                    if (numdef.minimum.x < numdef.maximum.x &&\n                        numdef.minimum.y < numdef.maximum.y &&\n                        numdef.minimum.z < numdef.maximum.z)\n                    {\n                        min = numdef.minimum;\n                        max = numdef.maximum;\n                    } else {\n                        // error on min/max\n                        console.error(\"NumberInput: minimum >= maximum\");                \n                        intent = Intent.DANGER;\n                    }\n                }\n\n                if (numdef.multipleof) {\n                    step = numdef.multipleof;\n                } else if (isFloat) {\n                    step.x = 0.1;\n                    step.y = 0.1;\n                    step.z = 0.1;\n                }\n            }\n        }\n\n        const { onSubmitCb, handleValue, ...filteredProps } = this.props;\n\n        return (\n            <div>\n                <NumericInput\n                    {...filteredProps}\n                    value={value ? value.x : 0}\n                    min={min ? min.x : undefined}\n                    max={max ? max.x : undefined}\n                    stepSize={step.x}\n                    minorStepSize={isFloat ? 0.1 : 1}\n                    onValueChange={this.handleChangeX}\n                    disabled={readOnly === true}\n                    selectAllOnFocus={true}\n                    buttonPosition={Position.RIGHT}\n                    placeholder={\"-\"}\n                    intent={intent}\n                />\n                <NumericInput\n                    {...filteredProps}\n                    value={value ? value.y : 0}\n                    min={min ? min.y : undefined}\n                    max={max ? max.y : undefined}\n                    stepSize={step.y}\n                    minorStepSize={isFloat ? 0.1 : 1}\n                    onValueChange={this.handleChangeY}\n                    disabled={readOnly === true}\n                    selectAllOnFocus={true}\n                    buttonPosition={Position.RIGHT}\n                    placeholder={\"-\"}\n                    intent={intent}\n                />\n                <NumericInput\n                    {...filteredProps}\n                    value={value ? value.z : 0}\n                    min={min ? min.z : undefined}\n                    max={max ? max.z : undefined}\n                    stepSize={step.z}\n                    minorStepSize={isFloat ? 0.1 : 1}\n                    onValueChange={this.handleChangeZ}\n                    disabled={readOnly === true}\n                    selectAllOnFocus={true}\n                    buttonPosition={Position.RIGHT}\n                    placeholder={\"-\"}\n                    intent={intent}\n                />\n            </div>\n        );\n    }\n};\n\nexport const ParameterNumericInput3 = parameterWrapped()(ParameterNumericInput3C);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { Slider, ISliderProps } from '@blueprintjs/core';\nimport { RcpTypes, Vector3F32Definition, Vector2, Vector2F32Definition } from 'rabbitcontrol';\nimport Measure from 'react-measure';\n\ninterface Props extends ISliderProps {\n    continuous?: boolean;\n};\n\ninterface State {\n    dimensions: {\n        width: -1,\n        height: -1\n    }; \n};\n\nexport class ParameterSlider2C extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n            dimensions: {\n                width: -1,\n                height: -1\n            },\n        };\n    }    \n\n    handleChangeX = (value: number) => {\n\n        const vec = (this.props.value as Vector2).clone();\n        vec.x = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(0);\n        }\n    }\n    handleChangeY = (value: number) => {\n\n        const vec = (this.props.value as Vector2).clone();\n        vec.y = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(0);\n        }\n    }\n\n    handleRelease = (value: number) => {\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as Vector2;\n        let step = new Vector2(1, 1);\n        let isFloat:boolean = false;\n        let min:Vector2|undefined = undefined;\n        let max:Vector2|undefined = undefined;  \n        let readOnly:boolean = false;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly || false;\n            const numdef = param.typeDefinition as Vector2F32Definition;\n            if (numdef !== undefined && \n                numdef.minimum !== undefined && \n                numdef.maximum !== undefined)\n            {\n                min = numdef.minimum;\n                max = numdef.maximum;\n\n                const valueRange = numdef.maximum.clone().sub(numdef.minimum);\n                    \n                isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR2F32 ||\n                                param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR3F32 ||\n                                param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR4F32;\n\n                if (numdef.multipleof) {\n                    step = numdef.multipleof;\n                } else if (isFloat) {\n                    if (this.state !== undefined && this.state.dimensions !== undefined) {                        \n                        step.x = valueRange.x > 0 && this.state.dimensions.width > 0 ? valueRange.x / this.state.dimensions.width : 1;\n                        step.y = valueRange.y > 0 && this.state.dimensions.width > 0 ? valueRange.y / this.state.dimensions.width : 1;\n                    }\n                }\n            }\n        }\n\n        const { onSubmitCb, handleValue, ...filteredProps } = this.props;\n\n        return (        \n            <Measure\n                onResize={(contentRect) => {\n                    this.setState({ dimensions: contentRect.entry })\n                }}\n            >\n            {({ measureRef }) =>\n                <div ref={measureRef}>\n                    <Slider\n                        {...filteredProps}\n                        value={value ? value.x : 0}\n                        min={min ? min.x : undefined}\n                        max={max ? max.x : undefined}\n                        stepSize={step.x}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max ? max.x : 0}\n                        onChange={this.handleChangeX}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />\n                    <Slider\n                        {...filteredProps}\n                        value={value ? value.y : 0}\n                        min={min ? min.y : undefined}\n                        max={max ? max.y : undefined}\n                        stepSize={step.y}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max ? max.y : 0}\n                        onChange={this.handleChangeY}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />    \n                </div>\n            }\n            </Measure>      \n        );\n    }\n\n    private renderLabel = (val: number) => {\n        const param = this.props.parameter\n        const value = val.toFixed(2); // fixme for small numbers!\n        let unit;\n        if (param) {\n            unit = (param.typeDefinition as Vector3F32Definition).unit\n        }\n        \n        return <div style={{whiteSpace: \"nowrap\"}}>{unit ? `${value} ${unit}`: value}</div>\n    }\n};\n\nexport const ParameterSlider2 = parameterWrapped()(ParameterSlider2C);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { NumericInput, INumericInputProps, Position, Intent } from '@blueprintjs/core';\nimport { RcpTypes, Vector3, Vector3F32Definition, Vector2 } from 'rabbitcontrol';\n\ninterface Props extends INumericInputProps {\n};\n\ninterface State {\n};\n\nexport class ParameterNumericInput2C extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {        \n        };\n    }    \n\n    handleChangeX = (value: number, valueAsString: string) => {\n\n        const vec = (this.props.value as Vector2).clone();\n        vec.x = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n    handleChangeY = (value: number, valueAsString: string) => {\n\n        const vec = (this.props.value as Vector2).clone();\n        vec.y = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as Vector2;\n        let step = new Vector2(1, 1);\n        let isFloat:boolean = false;\n        let min:Vector2|undefined = undefined;\n        let max:Vector2|undefined = undefined; \n        let readOnly:boolean = false;\n        let intent:Intent = Intent.NONE;\n\n        const param = this.props.parameter;\n        if (param) {\n\n            readOnly = param.readonly || false;\n\n            isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR2F32 ||\n                        param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR3F32 ||\n                        param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR4F32;\n\n            const numdef = param.typeDefinition as Vector3F32Definition;\n\n            if (numdef !== undefined) {\n\n                if (numdef.minimum !== undefined && \n                    numdef.maximum !== undefined)\n                {\n\n                    if (numdef.minimum.x < numdef.maximum.x &&\n                        numdef.minimum.y < numdef.maximum.y)\n                    {\n                        min = numdef.minimum;\n                        max = numdef.maximum;\n                    } else {\n                        // error on min/max\n                        console.error(\"NumberInput: minimum >= maximum\");                \n                        intent = Intent.DANGER;\n                    }\n                }\n\n                if (numdef.multipleof) {\n                    step = numdef.multipleof;\n                } else if (isFloat) {\n                    step.x = 0.1;\n                    step.y = 0.1;\n                }\n            }\n        }\n\n        const { onSubmitCb, handleValue, ...filteredProps } = this.props;\n\n        return (\n            <div>\n                <NumericInput\n                    {...filteredProps}\n                    value={value ? value.x : 0}\n                    min={min ? min.x : undefined}\n                    max={max ? max.x : undefined}\n                    stepSize={step.x}\n                    minorStepSize={isFloat ? 0.1 : 1}\n                    onValueChange={this.handleChangeX}\n                    disabled={readOnly === true}\n                    selectAllOnFocus={true}\n                    buttonPosition={Position.RIGHT}\n                    placeholder={\"-\"}\n                    intent={intent}\n                />\n                <NumericInput\n                    {...filteredProps}\n                    value={value ? value.y : 0}\n                    min={min ? min.y : undefined}\n                    max={max ? max.y : undefined}\n                    stepSize={step.y}\n                    minorStepSize={isFloat ? 0.1 : 1}\n                    onValueChange={this.handleChangeY}\n                    disabled={readOnly === true}\n                    selectAllOnFocus={true}\n                    buttonPosition={Position.RIGHT}\n                    placeholder={\"-\"}\n                    intent={intent}\n                />\n            </div>\n        );\n    }\n};\n\nexport const ParameterNumericInput2 = parameterWrapped()(ParameterNumericInput2C);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { Slider, ISliderProps } from '@blueprintjs/core';\nimport { RcpTypes, Vector3F32Definition, Vector4, Vector4F32Definition } from 'rabbitcontrol';\nimport Measure from 'react-measure';\n\ninterface Props extends ISliderProps {\n    continuous?: boolean;\n};\n\ninterface State {\n    dimensions: {\n        width: -1,\n        height: -1\n    }; \n};\n\nexport class ParameterSlider4C extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n            dimensions: {\n                width: -1,\n                height: -1\n            },\n        };\n    }    \n\n    handleChangeX = (value: number) => {\n\n        const vec = (this.props.value as Vector4).clone();\n        vec.x = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(0);\n        }\n    }\n    handleChangeY = (value: number) => {\n\n        const vec = (this.props.value as Vector4).clone();\n        vec.y = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(0);\n        }\n    }\n    handleChangeZ = (value: number) => {\n\n        const vec = (this.props.value as Vector4).clone();\n        vec.z = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(0);\n        }\n    }\n    handleChangeT = (value: number) => {\n\n        const vec = (this.props.value as Vector4).clone();\n        vec.t = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(0);\n        }\n    }\n\n    handleRelease = (value: number) => {\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as Vector4;\n        let step = new Vector4(1, 1, 1, 1);\n        let isFloat:boolean = false;\n        let min:Vector4|undefined = undefined;\n        let max:Vector4|undefined = undefined;  \n        let readOnly:boolean = false;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly || false;\n            const numdef = param.typeDefinition as Vector4F32Definition;\n            if (numdef !== undefined && \n                numdef.minimum !== undefined && \n                numdef.maximum !== undefined)\n            {\n                min = numdef.minimum;\n                max = numdef.maximum;\n\n                const valueRange = numdef.maximum.clone().sub(numdef.minimum);\n                    \n                isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR2F32 ||\n                                param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR3F32 ||\n                                param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR4F32;\n\n                if (numdef.multipleof) {\n                    step = numdef.multipleof;\n                } else if (isFloat) {\n                    if (this.state !== undefined && this.state.dimensions !== undefined) {                        \n                        step.x = valueRange.x > 0 && this.state.dimensions.width > 0 ? valueRange.x / this.state.dimensions.width : 1;\n                        step.y = valueRange.y > 0 && this.state.dimensions.width > 0 ? valueRange.y / this.state.dimensions.width : 1;\n                        step.z = valueRange.z > 0 && this.state.dimensions.width > 0 ? valueRange.z / this.state.dimensions.width : 1;\n                        step.t = valueRange.t > 0 && this.state.dimensions.width > 0 ? valueRange.t / this.state.dimensions.width : 1;\n                    }\n                }\n            }\n        }\n\n        const { onSubmitCb, handleValue, ...filteredProps } = this.props;\n\n        return (        \n            <Measure\n                onResize={(contentRect) => {\n                    this.setState({ dimensions: contentRect.entry })\n                }}\n            >\n            {({ measureRef }) =>\n                <div ref={measureRef}>\n                    <Slider\n                        {...filteredProps}\n                        value={value ? value.x : 0}\n                        min={min ? min.x : undefined}\n                        max={max ? max.x : undefined}\n                        stepSize={step.x}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max ? max.x : 0}\n                        onChange={this.handleChangeX}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />\n                    <Slider\n                        {...filteredProps}\n                        value={value ? value.y : 0}\n                        min={min ? min.y : undefined}\n                        max={max ? max.y : undefined}\n                        stepSize={step.y}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max ? max.y : 0}\n                        onChange={this.handleChangeY}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />\n                    <Slider\n                        {...filteredProps}\n                        value={value ? value.z : 0}\n                        min={min ? min.z : undefined}\n                        max={max ? max.z : undefined}\n                        stepSize={step.z}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max ? max.z : 0}\n                        onChange={this.handleChangeZ}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />\n                    <Slider\n                        {...filteredProps}\n                        value={value ? value.t : 0}\n                        min={min ? min.t : undefined}\n                        max={max ? max.t : undefined}\n                        stepSize={step.t}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max ? max.t : 0}\n                        onChange={this.handleChangeT}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />      \n                </div>\n            }\n            </Measure>      \n        );\n    }\n\n    private renderLabel = (val: number) => {\n        const param = this.props.parameter\n        const value = val.toFixed(2); // fixme for small numbers!\n        let unit;\n        if (param) {\n            unit = (param.typeDefinition as Vector3F32Definition).unit\n        }\n        \n        return <div style={{whiteSpace: \"nowrap\"}}>{unit ? `${value} ${unit}`: value}</div>\n    }\n};\n\nexport const ParameterSlider4 = parameterWrapped()(ParameterSlider4C);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { NumericInput, INumericInputProps, Position, Intent } from '@blueprintjs/core';\nimport { RcpTypes, Vector3, Vector3F32Definition, Vector4, Vector4F32Definition } from 'rabbitcontrol';\n\ninterface Props extends INumericInputProps {\n};\n\ninterface State {\n};\n\nexport class ParameterNumericInput4C extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {        \n        };\n    }    \n\n    handleChangeX = (value: number, valueAsString: string) => {\n\n        const vec = (this.props.value as Vector4).clone();\n        vec.x = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n    handleChangeY = (value: number, valueAsString: string) => {\n\n        const vec = (this.props.value as Vector4).clone();\n        vec.y = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n    handleChangeZ = (value: number, valueAsString: string) => {\n\n        const vec = (this.props.value as Vector4).clone();\n        vec.z = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n    handleChangeT = (value: number, valueAsString: string) => {\n\n        const vec = (this.props.value as Vector4).clone();\n        vec.t = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as Vector4;\n        let step = new Vector4(1, 1, 1, 1);\n        let isFloat:boolean = false;\n        let min:Vector4|undefined = undefined;\n        let max:Vector4|undefined = undefined; \n        let readOnly:boolean = false;\n        let intent:Intent = Intent.NONE;\n\n        const param = this.props.parameter;\n        if (param) {\n\n            readOnly = param.readonly || false;\n\n            isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR2F32 ||\n                        param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR3F32 ||\n                        param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR4F32;\n\n            const numdef = param.typeDefinition as Vector4F32Definition;\n\n            if (numdef !== undefined) {\n\n                if (numdef.minimum !== undefined && \n                    numdef.maximum !== undefined)\n                {\n\n                    if (numdef.minimum.x < numdef.maximum.x &&\n                        numdef.minimum.y < numdef.maximum.y &&\n                        numdef.minimum.z < numdef.maximum.z &&\n                        numdef.minimum.t < numdef.maximum.t)\n                    {\n                        min = numdef.minimum;\n                        max = numdef.maximum;\n                    } else {\n                        // error on min/max\n                        console.error(\"NumberInput: minimum >= maximum\");                \n                        intent = Intent.DANGER;\n                    }\n                }\n\n                if (numdef.multipleof) {\n                    step = numdef.multipleof;\n                } else if (isFloat) {\n                    step.x = 0.1;\n                    step.y = 0.1;\n                    step.z = 0.1;\n                    step.t = 0.1;\n                }\n            }\n        }\n\n        const { onSubmitCb, handleValue, ...filteredProps } = this.props;\n\n        return (\n            <div>\n                <NumericInput\n                    {...filteredProps}\n                    value={value ? value.x : 0}\n                    min={min ? min.x : undefined}\n                    max={max ? max.x : undefined}\n                    stepSize={step.x}\n                    minorStepSize={isFloat ? 0.1 : 1}\n                    onValueChange={this.handleChangeX}\n                    disabled={readOnly === true}\n                    selectAllOnFocus={true}\n                    buttonPosition={Position.RIGHT}\n                    placeholder={\"-\"}\n                    intent={intent}\n                />\n                <NumericInput\n                    {...filteredProps}\n                    value={value ? value.y : 0}\n                    min={min ? min.y : undefined}\n                    max={max ? max.y : undefined}\n                    stepSize={step.y}\n                    minorStepSize={isFloat ? 0.1 : 1}\n                    onValueChange={this.handleChangeY}\n                    disabled={readOnly === true}\n                    selectAllOnFocus={true}\n                    buttonPosition={Position.RIGHT}\n                    placeholder={\"-\"}\n                    intent={intent}\n                />\n                <NumericInput\n                    {...filteredProps}\n                    value={value ? value.z : 0}\n                    min={min ? min.z : undefined}\n                    max={max ? max.z : undefined}\n                    stepSize={step.z}\n                    minorStepSize={isFloat ? 0.1 : 1}\n                    onValueChange={this.handleChangeZ}\n                    disabled={readOnly === true}\n                    selectAllOnFocus={true}\n                    buttonPosition={Position.RIGHT}\n                    placeholder={\"-\"}\n                    intent={intent}\n                />\n                <NumericInput\n                    {...filteredProps}\n                    value={value ? value.t : 0}\n                    min={min ? min.t : undefined}\n                    max={max ? max.t : undefined}\n                    stepSize={step.t}\n                    minorStepSize={isFloat ? 0.1 : 1}\n                    onValueChange={this.handleChangeT}\n                    disabled={readOnly === true}\n                    selectAllOnFocus={true}\n                    buttonPosition={Position.RIGHT}\n                    placeholder={\"-\"}\n                    intent={intent}\n                />\n            </div>\n        );\n    }\n};\n\nexport const ParameterNumericInput4 = parameterWrapped()(ParameterNumericInput4C);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { RangeSlider, IRangeSliderProps, NumberRange } from '@blueprintjs/core';\nimport { NumberDefinition, RcpTypes, Range, RangeDefinition, ValueParameter, RangeParameter } from 'rabbitcontrol';\nimport Measure from 'react-measure';\n\ninterface Props extends IRangeSliderProps {\n    continuous?: boolean;\n    rangeValue?: Range;\n};\n\ninterface State {\n    dimensions: {\n        width: -1,\n        height: -1\n    }; \n};\n\nexport class ParameterRangeSliderC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n            dimensions: {\n                width: -1,\n                height: -1\n            },\n        };\n    }    \n\n    handleChange = (value: NumberRange) => {\n        if (this.props.handleValue) {\n            this.props.handleValue(new Range(value[0], value[1]));\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(value);\n        }\n    }\n\n    handleRelease = (value: NumberRange) => {\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        \n        const value = this.props.value as Range;\n        let step = 1;\n        let isFloat:boolean = false;\n        let min:number|undefined = undefined;\n        let max:number|undefined = undefined;\n        let default_value:NumberRange;\n        let readOnly:boolean = false;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly || false;\n            const numdef = param.typeDefinition as RangeDefinition;\n            const element_type = numdef.elementType as NumberDefinition;\n            if (numdef !== undefined && \n                element_type.minimum !== undefined && \n                element_type.maximum !== undefined)\n            {\n                min = element_type.minimum;\n                max = element_type.maximum;\n\n                const valueRange = (max - min);                    \n                isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.FLOAT32 ||\n                                param.typeDefinition.datatype === RcpTypes.Datatype.FLOAT64;\n\n                if (element_type.multipleof) {\n                    step = element_type.multipleof;\n                } else if (isFloat) {\n                    if (this.state !== undefined && this.state.dimensions !== undefined) {                        \n                        step = valueRange > 0 && this.state.dimensions.width > 0 ? valueRange / this.state.dimensions.width : 1\n                    }\n                }\n            }\n        }\n\n        const { onSubmitCb, handleValue, ...filteredProps } = this.props;\n\n        return (        \n            <Measure\n                onResize={(contentRect) => {\n                    this.setState({ dimensions: contentRect.entry })\n                }}\n            >\n            {({ measureRef }) =>\n                <div ref={measureRef}>\n                    <RangeSlider\n                        {...filteredProps}\n                        value={value ? [value.value1, value.value2] : [0, 1]}\n                        min={min}\n                        max={max}\n                        stepSize={step}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max}\n                        onChange={this.handleChange}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />      \n                </div>\n            }\n            </Measure>      \n        );\n    }\n\n    private renderLabel = (val: number) => {\n        const param = this.props.parameter\n        const value = val.toFixed(2);\n        let unit;\n        if (param) {\n            unit = (param.typeDefinition as NumberDefinition).unit\n        }\n\n        return <div style={{whiteSpace: \"nowrap\"}}>{unit ? `${value} ${unit}`: value}</div>\n    }\n};\n\nexport const ParameterRangeSlider = parameterWrapped()(ParameterRangeSliderC);","import * as React from 'react';\nimport { InjectedProps, parameterWrapped } from './ElementWrapper';\nimport { Colors, Tabs, Tab, TabId } from '@blueprintjs/core';\nimport { Parameter, GroupParameter, TabsWidget } from 'rabbitcontrol';\nimport ParameterWidget from './ParameterWidget';\n\ninterface Props {\n    style?: React.CSSProperties;\n};\n\ninterface State {\n    navbarTabId: TabId;\n};\n\nexport class ParameterTabsGroupC extends React.Component<Props & InjectedProps, State> {\n\n    static readonly COMPONENT_DEFAULT_COLOR = Colors.GRAY1;\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n\n        this.state = {navbarTabId: 0};\n    } \n\n    handleTabChange = (navbarTabId: TabId) => \n    {\n        this.setState({ navbarTabId });\n    }\n\n    onSubmit = () =>\n    {\n        if (this.props.onSubmitCb)\n        {\n            this.props.onSubmitCb();\n        }\n    }\n    \n    createChildWidgets(parameter: GroupParameter) \n    {\n        if (parameter.widget instanceof TabsWidget) \n        {\n            return (<ParameterWidget \n                key={\"_\"+parameter.id}\n                parameter={parameter} \n                onSubmitCb={this.onSubmit}\n            />);\n        }\n\n\n        return parameter.children\n        .filter(param => \n        {\n            const is_group = (param instanceof GroupParameter);\n            var is_tabs = false;\n            var parent_tabs = false;\n\n            if (is_group)\n            {\n                is_tabs = param.widget instanceof TabsWidget;\n            }\n\n            if (param.parent !== undefined)\n            {\n                parent_tabs = param.parent.widget instanceof TabsWidget;\n            }\n\n            return !is_group || (!parent_tabs && !is_tabs);\n        })\n        .sort((a: Parameter, b: Parameter): number =>\n        { \n            return ((a.order || 0) - (b.order || 0)); \n        })\n        .map((param) =>\n        {\n            return <ParameterWidget \n                        key={param.id}\n                        parameter={param} \n                        onSubmitCb={this.onSubmit}\n                    />;\n        });\n    }\n\n    renderChildren()\n    {\n        // render non-group chilren of this GroupParameter\n        const parameter = this.props.parameter;\n\n        if (parameter !== undefined)\n        {\n            return (parameter as GroupParameter).children\n            .filter(param => !(param instanceof GroupParameter))\n            .sort((a: Parameter, b: Parameter): number => ((a.order || 0) - (b.order || 0)))\n            .map((p) =>\n            { \n                return (\n                    <ParameterWidget \n                        key={p.id}\n                        parameter={p} \n                        onSubmitCb={this.onSubmit}\n                    />\n                );\n            });\n        }        \n        \n        return (\"\");\n    }\n\n    createTabWidgets(parameter: Parameter[])\n    {\n        if (parameter === undefined)\n        {\n            return \"\";\n        }\n\n        // each parameter gets a tab\n\n        return parameter\n        .filter(param => param instanceof GroupParameter)\n        .sort((a: Parameter, b: Parameter): number => ((a.order || 0) - (b.order || 0)))\n        .map((param, index) => \n        {\n            const g_param = (param as GroupParameter);\n\n            if (this.state.navbarTabId === 0\n                && index === 0\n                && param.label !== undefined)\n            {\n                // set this delayed!\n                this.setState({navbarTabId: (param.label as string)});\n            }\n\n            return <Tab \n                    key={\"tab_\" + param.id} \n                    id={param.label} \n                    title={param.label} \n                    panel={<div>\n                            <div className=\"inner\" style={{\n                                border: \"1px solid #454545\",\n                                background: \"transparent\"\n                            }}>\n                                {this.createChildWidgets(g_param)}\n                            </div>\n\n                            {g_param.children.length > 0 ?\n                                <div>\n                                    <hr style={{borderTop: \"1px solid gray\"}}/>\n                                    {this.renderChildren()}\n                                </div>\n                            : \"\"\n                            }                            \n                            </div>}\n                    />;\n        });\n    }\n    \n    render() \n    {\n        let label = \"\";\n        const param = this.props.parameter;\n        \n        if (param \n            && param.label !== undefined) \n        {\n            label = param.label;\n        }\n\n        return (\n            <div style={this.props.style}>\n\n                <Tabs \n                    id=\"navbar\"\n                    renderActiveTabPanelOnly={true}\n                    onChange={this.handleTabChange} \n                    selectedTabId={this.state.navbarTabId}\n                >\n                    {/* {this.props.labelDisabled !== true ? <Tab title={label} disabled={true}></Tab> : <div></div>} */}\n                    {this.createTabWidgets((this.props.parameter as GroupParameter).children)}\n                </Tabs>\n            </div>\n        );\n    }\n\n};\n\nexport const ParameterTabsGroup = parameterWrapped({ignoreReadonly: true})(ParameterTabsGroupC);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { RadioGroup, Radio } from '@blueprintjs/core';\nimport { EnumParameter } from 'rabbitcontrol';\n\ninterface Props {\n};\n\ninterface State {\n};\n\nexport class ParameterRadioC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps)\n    {\n        \n        super(props);    \n        console.log(\"create radio parameter\");\n    }    \n\n    handleChange = (event: React.FormEvent<HTMLInputElement>) => \n    {\n        console.log(\"radio changed: \"+ (event.target as HTMLInputElement).value);\n        \n        if (this.props.handleValue) {\n            this.props.handleValue((event.target as HTMLInputElement).value);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as string;    \n        let readOnly:boolean|undefined;\n        let entries:string[]|undefined;\n        let multiSelect:boolean|undefined;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;\n        }\n\n        if (param instanceof EnumParameter) {\n            entries = param.enumDefinition.entries;\n\n            // TODO: use a multiselectable RadioGroup\n            multiSelect = param.enumDefinition.multiselect;\n        }\n\n        const { onSubmitCb, handleValue, ...filteredProps } = this.props;\n\n        return (            \n            <RadioGroup\n                {...filteredProps}\n                onChange={this.handleChange}\n                disabled={readOnly === true}\n                selectedValue={value}\n            >\n                {this.renderOptions(value, entries)}            \n            </RadioGroup>      \n        );\n    }\n\n    private renderOptions(sel: string, entries?: string[]) {\n        if (entries) {            \n            return entries.map( e => \n                {\n                    return <Radio key={e} label={e} value={e} />\n                });\n        }\n    }\n};\n\nexport const ParameterRadio = parameterWrapped()(ParameterRadioC);","import { Colors } from '@blueprintjs/core';\nimport { BangParameter, BooleanParameter, EnumParameter, GroupParameter, ImageParameter, NumberDefinition, NumberParameter, Parameter, RGBAParameter, RGBParameter, SliderWidget, ValueParameter, Vector3F32Parameter, NumberboxWidget, Vector3F32Definition, Vector3I32Parameter, Vector2I32Parameter, Vector2F32Parameter, Vector2F32Definition, Vector4F32Parameter, Vector4I32Parameter, Vector4F32Definition, Range, RangeParameter, RangeDefinition, RcpTypes, TabsWidget, ListWidget, ListPageWidget, RadiobuttonWidget } from 'rabbitcontrol';\nimport * as React from 'react';\nimport { ParameterButtonC } from './ParameterButton';\nimport { ParameterCheckboxC } from './ParameterCheckbox';\nimport { ParameterColorInputC } from './ParameterColorInput';\nimport { ParameterFoldableGroupC } from './ParameterFoldableGroup';\nimport { ParameterHTMLSelectC } from './ParameterHTMLSelect';\nimport { ParameterNumericInputC } from './ParameterNumberInput';\nimport { ParameterSliderC } from './ParameterSlider';\nimport { ParameterTextInputC } from './ParameterTextInput';\nimport { ParameterTextWithLabelC } from './ParameterTextWithLabel';\nimport { ParameterSlider3C } from './ParameterSlider3';\nimport { ParameterNumericInput3C } from './ParameterNumberInput3';\nimport { ParameterSlider2C } from './ParameterSlider2';\nimport { ParameterNumericInput2C } from './ParameterNumberInput2';\nimport { ParameterSlider4C } from './ParameterSlider4';\nimport { ParameterNumericInput4C } from './ParameterNumberInput4';\nimport { ParameterRangeSliderC } from './ParameterRangeSlider'\nimport { ParameterTabsGroupC } from './ParameterTabsGroup';\nimport { ParameterRadioC } from './ParameterRadio';\n\n\ninterface Props {\n    parameter: Parameter;\n    onSubmitCb: () => void;\n};\n\ninterface State {\n    enabled: boolean;\n    label?: string;\n    description?: string;\n    value: any;  \n    dimensions: {\n        width: -1,\n        height: -1\n    };  \n};\n\nexport default class ParameterWidget extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n\n        let value;\n        if (this.props.parameter instanceof ValueParameter && \n            this.props.parameter.value != null)\n        {\n            value = this.props.parameter.valueConstrained();\n        }\n\n        this.state = {\n            enabled: true,\n            label: this.props.parameter.label,\n            description: this.props.parameter.description,\n            value: value,\n            dimensions: {\n                width: -1,\n                height: -1\n            }\n        };\n    }\n\n    componentDidMount() {\n\n        // setup callbacks\n        const param = this.props.parameter;\n\n        if (param instanceof ValueParameter) {\n\n            param.addValueChangeListener((p) => {\n                if (p instanceof ValueParameter) {\n                    this.setState({\n                        value: p.valueConstrained()\n                    });\n                }\n            });\n        }\n\n        param.addChangeListener((p) => {\n            this.setState({\n                label: p.label,\n                description: p.description,\n            })\n        });\n    }\n\n    getWidth = () => {\n        return 1;\n    }\n\n    handleValueChange = (value: any) => {\n\n        // set parameter value\n        if (this.props.parameter instanceof ValueParameter) {\n            this.props.parameter.value = value;\n        }\n\n        this.setState({ value: value });\n    }\n\n    handleValueSubmit = (event: any) =>\n    {\n        //\n        if (event && event.preventDefault) {\n            event.preventDefault();\n        }        \n        if (this.props.parameter instanceof ValueParameter) {\n            if (this.props.parameter.setStringValue(this.state.value)) {\n                // call onsubmitcb to update client\n                this.props.onSubmitCb();\n            } else {\n                // set string value failed... \n                console.error(\"could not set stringvalue...\");                \n                this.setState({ value: this.props.parameter.valueConstrained() });\n            }\n        }\n    }\n\n    handleButtonClick = () => {\n        this.props.parameter.setDirty();\n        this.props.onSubmitCb();        \n    }\n\n    renderValue(parameter: Parameter)\n    {\n        const widget = parameter.widget;        \n        \n        if (widget instanceof SliderWidget) {\n            console.log(\"SLIDER WIDGET\");\n        } else if (widget instanceof NumberboxWidget) {\n            console.log(\"NUMBERBOX WIDGET\");\n        }\n\n        \n        if (parameter instanceof ValueParameter) {\n\n            if (parameter instanceof NumberParameter) {\n\n                const numdef = parameter.typeDefinition as NumberDefinition;\n                if (!(widget instanceof NumberboxWidget) &&\n                    numdef !== undefined && \n                    numdef.minimum !== undefined && \n                    numdef.maximum !== undefined)\n                { \n                    if (numdef.minimum < numdef.maximum) {\n\n                        return ( \n                            <div>\n                                <div className=\"parameter-label\">{parameter.label}</div>\n                                <ParameterSliderC\n                                    {...this.props}\n                                    value={this.state.value}\n                                    handleValue={this.handleValueChange}\n                                    continuous={true}\n                                />\n                            </div>\n                        );\n                    } else {\n                        console.error(\"ParameterWidget: minimum >= maximum\");\n                        return this.defaultWidget();\n                    }\n                } else {\n\n                    // numeric input\n                    return (\n                        <div>\n                            <div className=\"parameter-label\">{parameter.label}</div>\n                            <ParameterNumericInputC\n                                {...this.props}\n                                value={this.state.value}\n                                handleValue={this.handleValueChange}\n                            />\n                        </div>\n                    );\n                }\n            }\n            else if (parameter instanceof Vector2F32Parameter ||\n                parameter instanceof Vector2I32Parameter) {\n\n                const def = parameter.typeDefinition as Vector2F32Definition;\n                \n                if (!(widget instanceof NumberboxWidget) &&\n                    def !== undefined && \n                    def.minimum !== undefined && \n                    def.maximum !== undefined)\n                { \n                    if (def.minimum.x < def.maximum.x &&\n                        def.minimum.y < def.maximum.y)\n                    {\n                        return ( \n                            <div>\n                                <div className=\"parameter-label\">{parameter.label}</div>\n                                <ParameterSlider2C\n                                    {...this.props}\n                                    value={this.state.value}\n                                    handleValue={this.handleValueChange}\n                                    continuous={true}\n                                />\n                            </div>\n                        );\n                    } else {\n                        console.error(\"ParameterWidget: minimum >= maximum\");\n                        return this.defaultWidget();\n                    }\n                } else {\n                    // numeric input\n                    return (\n                        <div>\n                            <div className=\"parameter-label\">{parameter.label}</div>\n                            <ParameterNumericInput2C\n                                {...this.props}\n                                value={this.state.value}\n                                handleValue={this.handleValueChange}\n                            />\n                        </div>\n                    );\n                }\n            }\n            else if (parameter instanceof Vector3F32Parameter ||\n                parameter instanceof Vector3I32Parameter) {\n\n                const def = parameter.typeDefinition as Vector3F32Definition;\n                \n                if (!(widget instanceof NumberboxWidget) &&\n                    def !== undefined && \n                    def.minimum !== undefined && \n                    def.maximum !== undefined)\n                { \n                    if (def.minimum.x < def.maximum.x &&\n                        def.minimum.y < def.maximum.y &&\n                        def.minimum.z < def.maximum.z)\n                    {\n                        return ( \n                            <div>\n                                <div className=\"parameter-label\">{parameter.label}</div>\n                                <ParameterSlider3C\n                                    {...this.props}\n                                    value={this.state.value}\n                                    handleValue={this.handleValueChange}\n                                    continuous={true}\n                                />\n                            </div>\n                        );\n                    } else {\n                        console.error(\"ParameterWidget: minimum >= maximum\");\n                        return this.defaultWidget();\n                    }\n                } else {\n                    // numeric input\n                    return (\n                        <div>\n                            <div className=\"parameter-label\">{parameter.label}</div>\n                            <ParameterNumericInput3C\n                                {...this.props}\n                                value={this.state.value}\n                                handleValue={this.handleValueChange}\n                            />\n                        </div>\n                    );\n                }\n            }\n            else if (parameter instanceof Vector4F32Parameter ||\n                parameter instanceof Vector4I32Parameter) {\n\n                const def = parameter.typeDefinition as Vector4F32Definition;\n                \n                if (!(widget instanceof NumberboxWidget) &&\n                    def !== undefined && \n                    def.minimum !== undefined && \n                    def.maximum !== undefined)\n                { \n                    if (def.minimum.x < def.maximum.x &&\n                        def.minimum.y < def.maximum.y &&\n                        def.minimum.z < def.maximum.z &&\n                        def.minimum.t < def.maximum.t)\n                    {\n                        return ( \n                            <div>\n                                <div className=\"parameter-label\">{parameter.label}</div>\n                                <ParameterSlider4C\n                                    {...this.props}\n                                    value={this.state.value}\n                                    handleValue={this.handleValueChange}\n                                    continuous={true}\n                                />\n                            </div>\n                        );\n                    } else {\n                        console.error(\"ParameterWidget: minimum >= maximum\");\n                        return this.defaultWidget();\n                    }\n                } else {\n                    // numeric input\n                    return (\n                        <div>\n                            <div className=\"parameter-label\">{parameter.label}</div>\n                            <ParameterNumericInput4C\n                                {...this.props}\n                                value={this.state.value}\n                                handleValue={this.handleValueChange}\n                            />\n                        </div>\n                    );\n                }\n            }\n            else if (parameter instanceof BooleanParameter) {\n                return (\n                    <div>\n                        <div className=\"parameter-label\">{parameter.label}</div>\n                        <ParameterCheckboxC\n                            {...this.props}\n                            value={this.state.value}\n                            handleValue={this.handleValueChange}\n                        />\n                    </div>\n                );\n            } \n            else if (parameter instanceof RGBAParameter ||\n                     parameter instanceof RGBParameter)\n            {\n                return (\n                    <div>\n                        <div className=\"parameter-label\">{parameter.label}</div>\n                        <ParameterColorInputC\n                            {...this.props}\n                            value={this.state.value}\n                            handleValue={this.handleValueChange}\n                        />\n                    </div>\n                );\n            } \n            else if (parameter instanceof EnumParameter)\n            {\n                if (parameter.widget instanceof RadiobuttonWidget)\n                {\n                    return (\n                        <div>\n                            <div className=\"parameter-label\"\n                                style={{marginBottom: 15}}\n                            >\n                                {parameter.label}\n                            </div>\n                            <ParameterRadioC\n                                {...this.props}\n                                value={this.state.value}\n                                handleValue={this.handleValueChange}\n                            />\n                        </div>\n                    );\n                }\n                else\n                {\n                    return (\n                        <div>\n                            <div className=\"parameter-label\">{parameter.label}</div>\n                            <ParameterHTMLSelectC\n                                {...this.props}\n                                value={this.state.value}\n                                handleValue={this.handleValueChange}\n                            />\n                        </div>\n                    );\n                }\n\n            }\n            else if (parameter instanceof ImageParameter) {\n                \n                const blob = new Blob([parameter.value]);\n                const url = window.URL.createObjectURL(blob);\n\n                return (\n                    <div>\n                        <div className=\"parameter-label\">{parameter.label}</div>\n                        <img src={url} alt=\"IMAGE\" height={200}/>\n                    </div>\n                );\n            }\n            else if (parameter instanceof RangeParameter) {\n                \n                const Range = parameter.value;\n\n                return (\n                    <div>\n                        <div className=\"parameter-label\">{parameter.label}</div>\n                        <ParameterRangeSliderC                        \n                            {...this.props}\n                            value={this.state.value}\n                            handleValue={this.handleValueChange}\n                        />\n                    </div>\n                );\n            }\n            else {\n                // everything else...\n                return (\n                    <div>\n                        <div className=\"parameter-label\">{parameter.label}</div>\n                        <ParameterTextInputC\n                            {...this.props}\n                            value={this.state.value}\n                            handleValue={this.handleValueChange}\n                        />\n                    </div>\n                );\n            }\n\n            // end: value parameter\n        }\n        else if (parameter instanceof BangParameter)\n        {\n            return (\n                <ParameterButtonC\n                    {...this.props}\n                    value={this.state.value}\n                    handleValue={this.handleButtonClick}\n                />\n            );\n        }\n        else if (parameter instanceof GroupParameter) \n        {\n            if (parameter.widget instanceof TabsWidget)\n            {\n                return (\n                    <ParameterTabsGroupC\n                        {...this.props}\n                        value={this.state.value}\n                        handleValue={this.handleValueChange}  \n                    />\n                );\n            }\n            else if (parameter.widget instanceof ListWidget)\n            {\n                // TODO\n            }\n            else if (parameter.widget instanceof ListPageWidget)\n            {\n                // ?\n            }\n\n            // default: foldable group\n            return (\n                <ParameterFoldableGroupC\n                    {...this.props}\n                    value={this.state.value}\n                    handleValue={this.handleValueChange}\n                />\n            );\n        }\n\n        return;\n    }\n\n    render()\n    {\n        const parameter = this.props.parameter;\n\n        if (!parameter) {\n            console.error(\"no parameter\");            \n            return (\n                <div>no parameter</div>\n            );\n        }\n\n        // less framing for tabs widgets\n        if (parameter.widget instanceof TabsWidget)\n        {\n            return (        \n                <div className=\"parameter-wrapper\">                    \n                    {this.renderValue(parameter)}\n                </div>\n            );\n        }\n\n        // default framing\n        return (        \n            <div className=\"parameter-wrapper\">\n                \n                <div className=\"inner\" style={{                    \n                    border: (parameter instanceof GroupParameter) ? \"1px solid #454545\" : \"1px solid #353535\",\n                    background: (parameter instanceof GroupParameter) ? \"transparent\" : Colors.DARK_GRAY3\n                }}>\n                    {this.renderValue(parameter)}\n                </div>\n            </div>\n        );\n    }\n\n    private defaultWidget() {\n        return (\n            <ParameterTextWithLabelC\n                {...this.props}\n                value={this.state.value.toString()}                \n            />\n        );\n    }\n\n}","import { Colors } from \"@blueprintjs/core\";\n\nexport const SSL_INFO_TEXT = \"Connecting to unsecure websocket from secure context. You may need to adjust your browser settings.\";\nexport const SSL_INFO_TEXT_FIREFOX = \"To allow this please set: 'network.websocket.allowInsecureFromHTTPS' in 'about:config' to 'true'.\";","import * as React from 'react';\nimport ParameterWidget from './ParameterWidget'\nimport { Alert, Intent, InputGroup, ControlGroup, Text, Colors, Checkbox } from '@blueprintjs/core';\nimport { Parameter, Client, WebSocketClientTransporter, GroupParameter, TabsWidget } from 'rabbitcontrol';\nimport { SSL_INFO_TEXT, SSL_INFO_TEXT_FIREFOX } from './Globals';\n\ntype Props = {\n};\n\ntype State = {\n    isConnected: boolean;\n    error?: string;\n    client?: Client;\n    host: string;\n    port: number;\n    parameters: Parameter[];\n    serverVersion: string;\n    serverApplicationId: string;\n    rootWithTabs: boolean;\n};\n\nexport default class ConnectionDialog extends React.Component<Props, State> {\n    \n    private addTimer?: number;\n    private removeTimer?: number;\n    private rootParam = new GroupParameter(0);\n    \n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            isConnected: false,\n            host: 'localhost',\n            port: 10000,\n            parameters: [],\n            serverVersion: \"\",\n            serverApplicationId: \"\",\n            rootWithTabs: false,\n        };\n\n        Client.VERBOSE = true;\n\n        this.rootParam.label = \"root\";\n        this.rootParam.widget = new TabsWidget();\n    }\n\n    componentDidMount = () => {\n        \n        /**\n         * If a hash is provided, try to connect right away\n         */\n        if (location.hash !== '') {\n            const [host, port] = location.hash.replace('#', '').split(':');\n            const portAsInt = parseInt(port, 10);        \n\n            console.log(\"autoconnect: \" + host + \":\" + portAsInt);\n            this.doConnect(host, portAsInt);\n        }\n    }\n\n    updateClient = () => {\n        if (this.state.client) {\n            this.state.client.update();\n        }\n    }\n\n    createParameterWidget(parameter: Parameter)\n    {\n        return <ParameterWidget key={parameter.id}\n                                parameter={parameter} \n                                onSubmitCb={this.updateClient}/>;\n    }\n\n    createWidgets(parameter: Parameter[])\n    {\n        return parameter\n        .filter(param => this.state.rootWithTabs === false || !(param instanceof GroupParameter))\n        .sort((a: Parameter, b: Parameter): number => \n        {\n            return ((a.order || 0) - (b.order || 0));\n        })\n        .map((param) => \n        { \n            return this.createParameterWidget(param); \n        });\n    }\n\n    setHost = (e: any) => {\n        this.setState({\n            host: e.currentTarget.value as string,\n        });\n    }\n\n    setPort = (e: any) => {\n        this.setState({\n            port: parseInt(e.currentTarget.value, 10),\n        });\n    }\n\n    setTabsInRoot = (e: React.FormEvent<HTMLElement>) => {\n        this.setState({\n            rootWithTabs: (e.target as HTMLInputElement).checked,\n        });\n    }\n\n\n    render() \n    {\n        return <section>\n\n            <div className=\"rootgroup-wrapper\">\n                {\n                this.state.rootWithTabs === true\n                ?\n                    <ParameterWidget \n                        key={this.rootParam.id}\n                        parameter={this.rootParam} \n                        onSubmitCb={this.updateClient}                        \n                    />                \n                : \n                    this.createWidgets(this.state.parameters)\n                }\n            </div>\n\n\n            <div className=\"serverid\" style={{\n                color: Colors.GRAY1, \n            }}>\n                {this.state.serverApplicationId !== \"\" ? `connected to: ${this.state.serverApplicationId} - ` : \"\"}{this.state.serverVersion !== \"\" ? `rcp: ${this.state.serverVersion}` : \"\"}\n            </div>\n\n            <Alert\n                className={\"bp3-dark\"}\n                confirmButtonText=\"Connect\"\n                icon=\"offline\"\n                intent={Intent.NONE}\n                isOpen={this.state.isConnected !== true }\n                onConfirm={this.handleAlertConfirm}\n            >\n                <Text><strong>Connect to a RabbitControl server</strong></Text>\n                <br/>\n                <br/>\n                <ControlGroup style={{alignItems: \"center\"}}>\n                    <Text>Host:&nbsp;</Text>\n                    <InputGroup\n                        value={this.state.host}\n                        type=\"text\"\n                        onChange={this.setHost}\n                    />\n                </ControlGroup>\n                <br/>\n                <ControlGroup style={{alignItems: \"center\"}}>\n                    <Text>Port:&nbsp;</Text>                    \n                    <InputGroup\n                        value={this.state.port.toFixed(0)}\n                        min={1024}\n                        max={65535}\n                        type=\"number\"\n                        onChange={this.setPort}\n                    />\n                </ControlGroup>\n                <br/>\n\n                <Checkbox\n                    checked={this.state.rootWithTabs}\n                    onChange={this.setTabsInRoot}\n                >\n                    Tabs in Root\n                </Checkbox>\n\n                <div>\n                    {this.state.error ? this.state.error : undefined}\n                    {this.returnSSLInfo()}\n                </div>\n\n            </Alert>\n        \n        </section>;\n    }\n\n    private returnSSLInfo() {\n        const isSSL = document.location ? document.location.toString().startsWith(\"https\") : false;\n        const isFirefox = navigator.userAgent.indexOf(\"Firefox\") != -1;\n\n        if (isSSL && isFirefox) {\n            return (\n                <div>\n                    <br/>\n                    {SSL_INFO_TEXT}\n                    <br/><br/>\n                    {SSL_INFO_TEXT_FIREFOX}\n                </div>\n            );\n        } else if (isSSL) {\n            return (\n                <div>\n                    <br/>\n                    {SSL_INFO_TEXT}\n                </div>\n            );\n        }\n    }\n\n    private handleAlertConfirm = () => {\n\n        this.setState({\n            error: undefined\n        });\n\n        this.doConnect(this.state.host, this.state.port);\n    }\n\n    private resetUI()\n    {\n        console.log(\"reset UI\");\n\n        this.stopTimers();\n\n        this.rootParam.children = [];\n\n        this.setState({\n            isConnected: false, \n            client: undefined, \n            parameters: this.rootParam.children,\n            serverVersion: \"\",\n            serverApplicationId: \"\",\n        });\n    }\n\n    private doDisconnect = () => {\n        \n        const client = this.state.client;\n\n        if (client) {\n            // clear callbacks\n            // TODO: do this in client\n            client.connected = undefined;\n            client.disconnected = undefined;            \n            client.onError = undefined;\n            client.parameterAdded = undefined;\n            client.parameterRemoved = undefined;\n\n            // dispose client\n            client.dispose();\n        }\n\n        this.resetUI();\n    }\n\n    private doConnect = (host: string, port: number) => {\n\n        if (host !== undefined &&\n            host !== \"\" &&\n            !isNaN(port))\n        {\n            // disconnect first\n            this.doDisconnect();\n\n            // set info\n            this.setState({\n                host: host,\n                port: port,\n                error: undefined\n            });\n\n            const client = new Client(new WebSocketClientTransporter())\n    \n            const { connected, disconnected, parameterAdded, parameterRemoved, onError, onServerInfo } = this;\n            Object.assign(client, { connected, disconnected, parameterAdded, parameterRemoved, onError, onServerInfo });\n    \n            try {\n                client.connect(host, port);\n\n                this.setState({\n                    client: client\n                });\n\n            } catch (e) {\n                console.log(e);\n            }\n        }\n    }\n\n    /**\n     * client callbacks - socket\n     */\n    private connected = () => \n    {\n        this.setState({\n            isConnected: true,\n        });\n\n        console.log(\"ConnectionDialog connected!\");\n    }\n\n    private disconnected = (event: CloseEvent) => \n    {\n        console.log(\"ConnectionDialog disconneted: \" + JSON.stringify(event));\n\n        this.setState({\n            error: `disconnected${event.reason ? \": \" + JSON.stringify(event.reason) : \"\"}`\n        });\n\n        this.resetUI();\n    }\n\n    private onError = (error: any) => {\n\n        if (error instanceof Error) {\n            console.error(error.message);\n        } else {\n            this.setState({\n                error: error.toString(),\n            });\n            this.resetUI();\n        }\n\n    }\n\n    /**\n     * client callbacks info\n     */\n    private onServerInfo = (version: string, applicationId: string) => \n    {\n        this.setState({\n            serverVersion: version,\n            serverApplicationId: applicationId\n        });\n    }\n\n    private parameterChangeListener = (parameter: Parameter) => \n    {\n        if (!parameter.onlyValueChanged())\n        {\n            if (parameter.parent !== undefined)\n            {\n                console.log(\"parameter changed: \" +  parameter.parent.label);\n            }\n            else if (parameter.parentChanged())\n            {\n                // this.rootParam.addChild(parameter);\n                parameter.parent = this.rootParam;\n\n                this.setState({\n                    parameters: this.rootParam.children,\n                });\n            }\n            else\n            {\n                console.log(\"paraemter changed: no parent\");                \n            }\n            \n            //force redraw\n            this.forceUpdate();\n        }\n    }\n\n    /**\n     * client callbacks parameter\n     */\n    private parameterAdded = (parameter: Parameter) => \n    {\n        if (!parameter.parent)\n        {\n            parameter.parent = this.rootParam;\n        }\n\n        parameter.addChangeListener(this.parameterChangeListener);\n\n        // deferer setstate\n        if (this.addTimer !== undefined) {\n            window.clearTimeout(this.addTimer);\n            this.addTimer = undefined;\n        }\n\n        this.addTimer = window.setTimeout(() => {\n            this.setState({\n                parameters: this.rootParam.children,\n            });\n        }, 100);\n    }\n\n    private parameterRemoved = (parameter: Parameter) =>\n    {\n        // this.rootParam.removeChild(parameter);\n        parameter.removeFromParent();\n\n        parameter.removeChangedListener(this.parameterChangeListener);\n        \n        if (this.removeTimer!== undefined) {\n            window.clearTimeout(this.removeTimer);\n            this.removeTimer = undefined;\n        }\n\n        this.removeTimer = window.setTimeout(() => {\n            this.setState({\n                parameters: this.rootParam.children,\n            });\n        }, 100);\n    }\n\n    /**\n     * \n     */\n    private stopTimers() {\n\n        if (this.addTimer !== undefined) {\n            window.clearTimeout(this.addTimer);\n            this.addTimer = undefined;\n        }\n\n        if (this.removeTimer!== undefined) {\n            window.clearTimeout(this.removeTimer);\n            this.removeTimer = undefined;\n        }\n\n    }\n\n} \n","import React, { Component } from 'react';\nimport './App.css';\nimport ConnectionDialog from './ConnectionDialog';\nimport { Colors } from '@blueprintjs/core';\n\n/*\n  use with local tcp-ts:\n  $ npm link ../rcp-ts\n\n  unlink with:\n  $ npm unlink rabbitcontrol\n  $ npm install\n*/\n\n\ninterface Props {\n};\n\ninterface State {\n  height: number;\n};\n\nclass App extends React.Component<Props, State> {\n\n  static VERBOSE_LOG = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      height: window.innerHeight,\n    };\n  }\n\n  componentDidMount() \n  {\n    window.addEventListener('resize', this.onWindowResize);\n  }\n\n  componentWillUnmount() \n  {\n    window.removeEventListener('resize', this.onWindowResize);\n  }\n\n  onWindowResize = () => \n  {\n    this.setState({ height: window.innerHeight });\n  }\n\n  render() {\n\n    return (\n      <section className={\"bp3-dark\"}>\n\n        <div className=\"App\" \n          style={{            \n            minHeight: this.state.height-40\n        }}>\n\n          <ConnectionDialog />\n\n          <div style={{\n            flex: 2\n          }}></div>\n\n          <div className=\"credits\" \n              style={{            \n                color: Colors.GRAY1\n          }}>\n            written by&nbsp;\n            <a style={{\n              color: Colors.GRAY1,\n              textDecoration: \"underline\"\n            }}\n              href=\"https://github.com/rabbitControl/rcp-ts-client\" target=\"#\">\n              i-n-g-o\n            </a>\n            &nbsp;&nbsp;|&nbsp;&nbsp;\n            <a style={{\n              color: Colors.GRAY1,\n              textDecoration: \"underline\"\n            }}\n              href=\"https://rabbitcontrol.github.io/\" target=\"#\">\n              rabbitControl\n            </a>\n            <br/>\n            uses&nbsp;\n            <a style={{\n              color: Colors.GRAY1,\n              textDecoration: \"underline\"\n            }}\n              href=\"https://blueprintjs.com/\">\n              blueprintjs\n            </a>\n          </div>\n        </div>\n\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css/normalize.css'\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css'\nimport '@blueprintjs/core/lib/css/blueprint.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}