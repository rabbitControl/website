{"version":3,"sources":["Globals.ts","ElementWrapper.tsx","ParameterButton.tsx","ParameterCheckbox.tsx","ParameterColorInput.tsx","ParameterFoldableGroup.tsx","ParameterHTMLSelect.tsx","ParameterNumberInput.tsx","ParameterSlider.tsx","ParameterTextInput.tsx","ParameterTextWithLabel.tsx","ParameterSlider3.tsx","ParameterNumberInput3.tsx","ParameterSlider2.tsx","ParameterNumberInput2.tsx","ParameterSlider4.tsx","ParameterNumberInput4.tsx","ParameterRangeSlider.tsx","ParameterWidget.tsx","ConnectionDialog.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["parameterLabelStyle","whiteSpace","color","Colors","GRAY1","fontSize","SSL_INFO_TEXT","parameterWrapped","config","Component","_class","_temp","_React$Component","ParameterComponentWrapper","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","ignoreReadonly","undefined","handleValue","value","param","state","parameter","ValueParameter","onSubmitCb","BangParameter","doBang","setState","handleParameterValueChange","App","VERBOSE_LOG","console","log","concat","userid","handleParameterChange","label","description","readonly","inherits","createClass","key","registerElement","unregisterParameterHandlers","unregisterElement","registerParameterHandlers","error","react","assign","disabled","addValueChangeListener","addChangeListener","removeValueChangedListener","removeChangedListener","React","displayName","name","ParameterButtonC","handleClick","event","confirmation","widget","needsConfirmation","handleDialogOpen","doSendBang","isOpen","handleDialogConfirm","handleDialogCancel","ld","labelDisabled","buttons","style","text","onClick","alert_alert","className","canEscapeKeyCancel","cancelButtonText","confirmButtonText","icon","intent","Intent","DANGER","onCancel","onConfirm","confirmationText","ParameterCheckboxC","handleChange","target","checked","readOnly","controls","onChange","alignIndicator","Position","LEFT","large","ParameterColorInputC","RGBAParameter","length","handleSubmit","preventDefault","setStringValue","substr","inputGroup","type","ParameterFoldableGroupC","handleButtonClick","controlGroup","vertical","marginLeft","text_text","collapse","children","COMPONENT_DEFAULT_COLOR","ParameterHTMLSelectC","entries","EnumParameter","enumDefinition","htmlSelect","renderOptions","sel","map","e","ParameterNumericInputC","valueAsString","isFloat","min","max","step","NONE","typeDefinition","datatype","RcpTypes","Datatype","FLOAT32","FLOAT64","numdef","minimum","maximum","multipleof","numericInput","stepSize","minorStepSize","onValueChange","selectAllOnFocus","buttonPosition","RIGHT","placeholder","ParameterSliderC","continuous","handleRelease","renderLabel","val","unit","toFixed","dimensions","width","height","_this2","valueRange","react_measure_default","a","onResize","contentRect","entry","_ref","measureRef","ref","slider","labelPrecision","labelStepSize","onRelease","labelRenderer","ParameterTextInputC","onSubmit","ParameterTextWithLabelC","defaultValue","NumberParameter","td","fixedNumber","display","flexDirection","justifyContent","alignItems","margin","labelWidth","LIGHT_GRAY5","background","DARK_GRAY1","flex","flexGrow","ParameterSlider3C","handleChangeX","vec3","clone","x","handleChangeY","y","handleChangeZ","z","Vector3","sub","VECTOR2F32","VECTOR3F32","VECTOR4F32","ParameterNumericInput3C","vec","ParameterSlider2C","Vector2","ParameterNumericInput2C","ParameterSlider4C","handleChangeT","t","Vector4","ParameterNumericInput4C","ParameterRangeSliderC","Range","element_type","elementType","rangeSlider","value1","value2","ParameterWidget","getWidth","handleValueChange","handleValueSubmit","setDirty","enabled","p","id","_this3","GroupParameter","createChildWidget","SliderWidget","NumberboxWidget","ParameterNumberInput_ParameterNumericInputC","ParameterSlider_ParameterSliderC","defaultWidget","Vector2F32Parameter","Vector2I32Parameter","def","ParameterNumberInput2_ParameterNumericInput2C","ParameterSlider2_ParameterSlider2C","Vector3F32Parameter","Vector3I32Parameter","ParameterNumberInput3_ParameterNumericInput3C","ParameterSlider3_ParameterSlider3C","Vector4F32Parameter","Vector4I32Parameter","ParameterNumberInput4_ParameterNumericInput4C","ParameterSlider4_ParameterSlider4C","BooleanParameter","ParameterCheckbox_ParameterCheckboxC","RGBParameter","ParameterColorInput_ParameterColorInputC","ParameterHTMLSelect_ParameterHTMLSelectC","ImageParameter","blob","Blob","url","window","URL","createObjectURL","src","alt","RangeParameter","ParameterRangeSlider_ParameterRangeSliderC","ParameterTextInput_ParameterTextInputC","ParameterFoldableGroup_ParameterFoldableGroupC","renderChildren","ParameterButton_ParameterButtonC","marginTop","marginBottom","card","interactive","renderValue","ParameterTextWithLabel_ParameterTextWithLabelC","toString","ConnectionDialog","myParameters","updateClient","client","update","setHost","host","currentTarget","setPort","port","parseInt","handleAlertConfirm","isNaN","doConnect","doDisconnect","connected","disconnected","onError","parameterAdded","parameterRemoved","dispose","resetUI","Client","VERBOSE","WebSocketClientTransporter","_assertThisInitialize","assertThisInitialized","onServerInfo","connect","isConnected","JSON","stringify","reason","Error","message","version","applicationId","serverVersion","serverApplicationId","parent","params","slice","push","addTimer","clearTimeout","setTimeout","parameters","index","indexOf","splice","removeTimer","ParameterWidget_ParameterWidget","createParameterWidget","createWidgets","returnSSLInfo","isSSL","document","location","startsWith","isFirefox","navigator","userAgent","stopTimers","onWindowResize","innerHeight","addEventListener","removeEventListener","react_default","createElement","minHeight","ConnectionDialog_ConnectionDialog","textAlign","textDecoration","href","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c744155f.chunk.js","sourcesContent":["import { Colors } from \"@blueprintjs/core\";\n\nexport const parameterLabelStyle:React.CSSProperties = {\n    whiteSpace: \"nowrap\", \n    color: Colors.GRAY1,\n    fontSize: 16,\n};\n\nexport const SSL_INFO_TEXT = \"Connecting to unsecure websocket from secure context. You may need to adjust your browser settings.\";\nexport const SSL_INFO_TEXT_FIREFOX = \"To allow this please set: 'network.websocket.allowInsecureFromHTTPS' in 'about:config' to 'true'.\";","import * as React from 'react';\nimport { Parameter, ValueParameter } from 'rabbitcontrol';\nimport {BangParameter} from 'rabbitcontrol';\nimport App from './App';\n\ninterface ExternalProps {\n    label: string;\n    userid: string;\n    registerElement: (element:RegisterCB) => void;\n    unregisterElement: (element:RegisterCB) => void;\n    onSubmitCb: () => void;\n}\n\nexport interface InjectedProps {\n    value: any;\n    parameter?: Parameter;\n    disabled?: boolean;    \n    handleValue?: (value: any) => void;\n    onSubmitCb?: () => void;\n}\n\ntype State = {\n    parameter?: Parameter;\n    label?: string;\n    description?: string;\n    value: any;\n    readonly?: boolean;\n};\n\n\nexport interface RegisterCB {\n    setParameter(parameter: Parameter): void;\n    removeParameter(parameter: Parameter): void;\n    getUserid(): string;\n}\n\n\ninterface Config {\n    ignoreReadonly?: boolean;\n};\n\nexport const parameterWrapped = (config?: Config) =>\n    <TOriginalProps extends {}>(\n        Component: (React.ComponentClass<TOriginalProps & InjectedProps>\n                  | React.StatelessComponent<TOriginalProps & InjectedProps>)\n    ) => {\n\n        type ResultProps = TOriginalProps & ExternalProps;\n\n        const result = class ParameterComponentWrapper extends React.Component<ResultProps, State> implements RegisterCB {\n            \n            static displayName = `ParameterComponentWrapper(${Component.displayName || Component.name})`;\n            private ignoreReadonly = config ? config.ignoreReadonly : undefined;\n\n            constructor(props: ResultProps) {\n                super(props);\n                this.state = {\n                    label: this.props.label,\n                    value: null,\n                    parameter: undefined,            \n                };\n            }\n\n            // override\n            componentDidMount() {\n                this.props.registerElement(this);\n            }\n\n            // override\n            componentWillUnmount() {\n                const param = this.state.parameter;\n                if (param) {\n                    this.unregisterParameterHandlers(param);\n                }\n        \n                this.props.unregisterElement(this);\n            }\n\n            /**\n             * RegisterCB interface\n             * \n             * @param parameter \n             */\n            setParameter(parameter: Parameter): void {\n\n                if (parameter.userid !== this.props.userid) {\n                    console.error(`userid mismatch! parameter: ${parameter.userid} - widget: ${this.props.userid}`);\n                    return;\n                }\n\n                if (App.VERBOSE_LOG) {\n                    console.log(`set parameter for widget (${this.props.userid})`);\n                }\n\n                this.registerParameterHandlers(parameter);\n                this.setState({\n                    parameter: parameter,\n                    label: parameter.label,\n                    readonly: parameter.readonly,\n                });\n            }\n\n            removeParameter(param: Parameter): void {\n                this.unregisterParameterHandlers(param);\n                this.setState({\n                    parameter: undefined,\n                });\n            }\n\n            getUserid(): string {\n                return this.props.userid;\n            }\n\n            /**\n             * handle value\n             */\n            handleValue = (value: any) => {\n                const param = this.state.parameter;\n                if (param instanceof ValueParameter) {\n                    param.value = value;\n                    this.props.onSubmitCb();\n                } else if (param instanceof BangParameter) {\n                    param.doBang();\n                    this.props.onSubmitCb();\n                }\n\n                this.setState({\n                    value: value,\n                })\n            };\n\n            // --------------------------------------------\n            // render\n            // --------------------------------------------\n            render(): JSX.Element {\n\n                const param = this.state.parameter;\n                const readonly = this.state.readonly;\n\n                return (\n                        <Component\n                            {...this.props} \n                            {...this.state} \n                            handleValue={this.handleValue}\n                            disabled={param ? (readonly ? (!(this.ignoreReadonly === true)) : false) : true}\n                        />\n                );\n            }\n\n\n            // --------------------------------------------\n            // --------------------------------------------\n            private handleParameterValueChange = (parameter: Parameter) => {\n\n                if (parameter instanceof ValueParameter) {\n\n                    if (App.VERBOSE_LOG) {\n                        console.log(`setting widget value (${parameter.userid}): ${parameter.value as string}`);                \n                    }\n\n                    this.setState({\n                        value: parameter.value\n                    });\n                }\n            }\n        \n            private handleParameterChange = (parameter: Parameter) => {\n                this.setState({\n                    label: parameter.label,\n                    description: parameter.description,\n                    readonly: parameter.readonly,\n                });\n            }\n        \n            private registerParameterHandlers(parameter: Parameter) {\n\n                if (parameter instanceof ValueParameter) {                    \n                    parameter.addValueChangeListener(this.handleParameterValueChange);                    \n                    this.setState({                        \n                        value: parameter.value,\n                    });\n                }\n        \n                parameter.addChangeListener(this.handleParameterChange); \n            }\n        \n            private unregisterParameterHandlers(parameter: Parameter) {\n                if (parameter instanceof ValueParameter) {\n                    parameter.removeValueChangedListener(this.handleParameterValueChange);\n                }\n                \n                parameter.removeChangedListener(this.handleParameterChange);\n            }\n        };\n\n        return result;\n    };\n\n","import * as React from 'react';\nimport { InjectedProps, parameterWrapped } from './ElementWrapper';\nimport { Button, Intent, Alert, IButtonProps } from '@blueprintjs/core';\n\ninterface Props extends IButtonProps {\n    className?: string;\n    label?: string;\n    labelDisabled?: boolean;\n    confirmationText?: string;\n};\n\ntype State = {\n    isOpen: boolean;\n};\n\nexport class ParameterButtonC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n            isOpen: false,\n        };\n    }\n    \n    handleClick = (event: React.MouseEvent<HTMLElement>) => {\n\n        const parameter = this.props.parameter;\n        let confirmation = false;\n\n        if (parameter && parameter.widget) {\n            confirmation = parameter.widget.needsConfirmation ? true : false;\n        }\n\n        if (confirmation) {\n            // open dialog\n            this.handleDialogOpen();\n        } else {\n            // directly send\n            this.doSendBang();        \n        }\n    }\n\n    render() {\n\n        const ld = this.props.labelDisabled;\n        let label = this.props.label;\n\n        if (this.props.parameter) {\n            label = this.props.parameter.label;\n        }\n\n        return (\n            <section>\n                <Button style={{whiteSpace: \"nowrap\", }}\n                    {...this.props}\n                    text={ld ? \"\" : label}\n                    onClick={this.handleClick}\n                />\n\n                <Alert\n                    className={`bp3-dark ${this.props.className}`}\n                    canEscapeKeyCancel={true}\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Send\"\n                    icon=\"warning-sign\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.isOpen}\n                    onCancel={this.handleDialogCancel}\n                    onConfirm={this.handleDialogConfirm}\n                >\n                    <p>\n                        {this.props.confirmationText ? this.props.confirmationText : `text ${label}?`}\n                        <br/>\n                        {(this.props.parameter && this.props.parameter.description) ? `(${this.props.parameter.description})` : \"\"}\n                    </p>\n                </Alert>\n            </section>\n        );\n\n    }\n\n    private handleDialogOpen = () => this.setState({ isOpen: true });\n    private handleDialogConfirm = () => {\n        this.setState({ isOpen: false });\n        this.doSendBang();\n    };\n    private handleDialogCancel = () => this.setState({ isOpen: false });\n\n    private doSendBang() {\n        if (this.props.handleValue) {\n            this.props.handleValue(null);\n        }\n    }\n};\n\nexport const ParameterButton = parameterWrapped()(ParameterButtonC);\n","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { INumericInputProps, Position, Checkbox } from '@blueprintjs/core';\n\ninterface Props extends INumericInputProps {\n};\n\ninterface State {\n};\n\nexport class ParameterCheckboxC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {        \n        };\n    }    \n\n    handleChange = (event: React.FormEvent<HTMLElement>) => {\n\n        if (this.props.handleValue) {\n            this.props.handleValue((event.target as HTMLInputElement).checked);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as boolean;    \n        let readOnly:boolean|undefined;\n\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;        \n        }\n\n        return (\n            <Checkbox\n                {...this.props}\n                checked={value ? value : false}\n                onChange={this.handleChange}\n                disabled={readOnly === true}\n                alignIndicator={Position.LEFT}\n                large={true}\n            />      \n        );\n    }\n};\n\nexport const ParameterCheckbox = parameterWrapped()(ParameterCheckboxC);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { INumericInputProps, InputGroup } from '@blueprintjs/core';\nimport { ValueParameter, RGBAParameter } from 'rabbitcontrol';\n\ninterface Props extends INumericInputProps {\n};\n\ninterface State {\n};\n\nexport class ParameterColorInputC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {        \n        };\n    }    \n\n    handleChange = (event: React.FormEvent<HTMLElement>) => {\n\n        if (this.props.handleValue) {\n            let value = (event.target as HTMLInputElement).value;\n\n            // we only can handle RGB values, add alpha if needed\n            if (this.props.parameter instanceof RGBAParameter) {\n                while (value.length < 9) {\n                    value += \"f\";\n                }\n            }\n            this.props.handleValue(value);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n    \n    handleSubmit = (event: any) => {\n        \n        if (event && event.preventDefault) {\n            event.preventDefault();\n        }\n\n        if (this.props.parameter instanceof ValueParameter) {\n            if (this.props.parameter.setStringValue(this.props.value)) {\n                if (this.props.onSubmitCb) {\n                    this.props.onSubmitCb();\n                }\n            } else {\n                console.error(\"could not set stringvalue...\");\n            }\n        }\n    }\n\n    render() {\n        let value = this.props.value as string;\n        let readOnly:boolean|undefined;\n\n        // we only can handle RGB values\n        if (value.length > 7) {\n            value = value.substr(0, 7);\n        }\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;            \n        }\n\n        return (     \n            <InputGroup\n                {...this.props}\n                value={value}\n                type=\"color\"\n                onChange={this.handleChange}\n                disabled={readOnly === true}\n            />     \n        );\n    }\n    \n};\n\nexport const ParameterColorInput = parameterWrapped()(ParameterColorInputC);","import * as React from 'react';\nimport { InjectedProps, parameterWrapped } from './ElementWrapper';\nimport { Colors, Text, Collapse, ControlGroup, Icon } from '@blueprintjs/core';\n\ninterface Props {\n    style?: React.CSSProperties;\n};\n\ninterface State {\n    isOpen: boolean;\n};\n\nexport class ParameterFoldableGroupC extends React.Component<Props & InjectedProps, State> {\n\n    static readonly COMPONENT_DEFAULT_COLOR = Colors.GRAY1;\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n            isOpen: false,\n        };\n    } \n    \n    render() {\n\n        let label = \"no label\";\n        const param = this.props.parameter;\n        if (param && param.label !== undefined) {\n            label = param.label;\n        }\n\n        return (\n            <div style={this.props.style}>\n                <ControlGroup vertical={false}>\n                    <Icon \n                        icon={this.state.isOpen ? \"remove\" : \"add\"}\n                        onClick={this.handleButtonClick}\n                    />\n                    <div style={{marginLeft: 10}}/>\n                    <Text>{label}</Text>\n                </ControlGroup>\n                <Collapse isOpen={this.state.isOpen}>\n                    {this.props.children}                \n                </Collapse>\n            </div>\n        );\n    }\n\n    private handleButtonClick = () => {\n        this.setState({\n            isOpen: !this.state.isOpen,\n        });\n    }\n};\n\nexport const ParameterFoldableGroup = parameterWrapped({ignoreReadonly: true})(ParameterFoldableGroupC);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { INumericInputProps, HTMLSelect } from '@blueprintjs/core';\nimport { EnumParameter } from 'rabbitcontrol';\n\ninterface Props extends INumericInputProps {\n};\n\ninterface State {\n};\n\nexport class ParameterHTMLSelectC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);    \n    }    \n\n    handleChange = (event: React.FormEvent<HTMLElement>) => {\n\n        if (this.props.handleValue) {\n            this.props.handleValue((event.target as HTMLInputElement).value);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as string;    \n        let readOnly:boolean|undefined;\n        let entries:string[]|undefined;\n        let multiSelect:boolean|undefined;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;\n        }\n\n        if (param instanceof EnumParameter) {\n            entries = param.enumDefinition.entries;\n        }\n\n        console.log(\"selected:\" + value);\n        console.log(\"entries:\" + entries);\n\n        return (\n            <HTMLSelect\n                {...this.props}\n                onChange={this.handleChange}\n                disabled={readOnly === true}\n                className=\"test\"\n            >\n                {this.renderOptions(value, entries)}            \n            </HTMLSelect>      \n        );\n    }\n\n    private renderOptions(sel: string, entries?: string[]) {\n        if (entries) {\n            return entries.map( e => { return <option {...e === sel ? \"selected\": null} key={e} value={e}>{e}</option>});\n        }\n    }\n};\n\nexport const ParameterHTMLSelect = parameterWrapped()(ParameterHTMLSelectC);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { NumericInput, INumericInputProps, Position, Intent } from '@blueprintjs/core';\nimport { NumberDefinition, RcpTypes } from 'rabbitcontrol';\n\ninterface Props extends INumericInputProps {\n};\n\ninterface State {\n};\n\nexport class ParameterNumericInputC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {        \n        };\n    }    \n\n    handleChange = (value: number, valueAsString: string) => {\n        if (this.props.handleValue) {\n            this.props.handleValue(value);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as number;\n        let step = 1;\n        let isFloat:boolean|undefined;\n        let min:number|undefined;\n        let max:number|undefined;  \n        let readOnly:boolean|undefined;\n        let intent:Intent = Intent.NONE;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;\n            isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.FLOAT32 ||\n                    param.typeDefinition.datatype === RcpTypes.Datatype.FLOAT64;\n\n            const numdef = param.typeDefinition as NumberDefinition;\n\n            if (numdef !== undefined) {\n\n                if (numdef.minimum !== undefined && \n                    numdef.maximum !== undefined)\n                {\n                    if (numdef.minimum < numdef.maximum) {\n                        min = numdef.minimum;\n                        max = numdef.maximum;\n                    } else {\n                        // error on min/max\n                        console.error(\"NumberInput: minimum >= maximum\");                \n                        intent = Intent.DANGER;\n                    }    \n                }\n\n                if (numdef.multipleof) {\n                    step = numdef.multipleof;\n                } else if (isFloat) {\n                    step = 0.1;\n                }\n            }\n        }\n\n        return (        \n            <NumericInput\n                {...this.props}\n                value={value ? value : 0}\n                min={min}\n                max={max}\n                stepSize={step}\n                minorStepSize={isFloat ? 0.1 : 1}\n                onValueChange={this.handleChange}\n                disabled={readOnly === true}\n                selectAllOnFocus={true}\n                buttonPosition={Position.RIGHT}\n                placeholder={\"-\"}\n                intent={intent}\n            />      \n        );\n    }\n};\n\nexport const ParameterNumericInput = parameterWrapped()(ParameterNumericInputC);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { Slider, ISliderProps } from '@blueprintjs/core';\nimport { NumberDefinition, RcpTypes } from 'rabbitcontrol';\nimport Measure from 'react-measure';\n\ninterface Props extends ISliderProps {\n    continuous?: boolean;\n};\n\ninterface State {\n    dimensions: {\n        width: -1,\n        height: -1\n    }; \n};\n\nexport class ParameterSliderC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n            dimensions: {\n                width: -1,\n                height: -1\n            },\n        };\n    }    \n\n    handleChange = (value: number) => {\n        if (this.props.handleValue) {\n            this.props.handleValue(value);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(value);\n        }\n    }\n\n    handleRelease = (value: number) => {\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as number;\n        let step = 1;\n        let isFloat:boolean;\n        let min:number;\n        let max:number;  \n        let readOnly:boolean|undefined;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;\n            const numdef = param.typeDefinition as NumberDefinition;\n            if (numdef !== undefined && \n                numdef.minimum !== undefined && \n                numdef.maximum !== undefined)\n            {\n                min = numdef.minimum;\n                max = numdef.maximum;\n\n                const valueRange = (numdef.maximum - numdef.minimum);                    \n                isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.FLOAT32 ||\n                                param.typeDefinition.datatype === RcpTypes.Datatype.FLOAT64;\n\n                if (numdef.multipleof) {\n                    step = numdef.multipleof;\n                } else if (isFloat) {\n                    if (this.state !== undefined && this.state.dimensions !== undefined) {                        \n                        step = valueRange > 0 && this.state.dimensions.width > 0 ? valueRange / this.state.dimensions.width : 1\n                    }\n                }\n            }\n        }\n\n        return (        \n            <Measure\n                onResize={(contentRect) => {\n                    this.setState({ dimensions: contentRect.entry })\n                }}\n            >\n            {({ measureRef }) =>\n                <div ref={measureRef}>\n                    <Slider\n                        {...this.props}\n                        value={value ? value : 0}\n                        min={min}\n                        max={max}\n                        stepSize={step}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max}\n                        onChange={this.handleChange}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />      \n                </div>\n            }\n            </Measure>      \n        );\n    }\n\n    private renderLabel = (val: number) => {\n        const param = this.props.parameter\n        const value = val.toFixed(2);\n        let unit;\n        if (param) {\n            unit = (param.typeDefinition as NumberDefinition).unit\n        }\n\n        return <div style={{whiteSpace: \"nowrap\"}}>{unit ? `${value} ${unit}`: value}</div>\n    }\n};\n\nexport const ParameterSlider = parameterWrapped()(ParameterSliderC);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { InputGroup } from '@blueprintjs/core';\nimport { ValueParameter } from 'rabbitcontrol';\n\ninterface Props {\n};\n\ninterface State {\n};\n\nexport class ParameterTextInputC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {        \n        };\n    }    \n\n    handleChange = (event: React.FormEvent<HTMLElement>) => {\n\n        if (this.props.handleValue) {\n            this.props.handleValue((event.target as HTMLInputElement).value);\n        }\n    }\n    \n    handleSubmit = (event: any) => {\n        \n        if (event && event.preventDefault) {\n            event.preventDefault();\n        }\n\n        if (this.props.parameter instanceof ValueParameter) {\n            if (this.props.parameter.setStringValue(this.props.value)) {\n                if (this.props.onSubmitCb) {\n                    this.props.onSubmitCb();\n                }\n            } else {\n                console.error(\"could not set stringvalue...\");\n            }\n        }\n    }\n\n    render() {\n        const value = this.props.value as string;\n        let readOnly:boolean|undefined;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;            \n        }\n\n        return (     \n            <form onSubmit={this.handleSubmit}>\n                <InputGroup\n                    {...this.props}\n                    value={value}\n                    onChange={this.handleChange}\n                    disabled={readOnly === true}\n                />  \n            </form>    \n        );\n    }\n    \n};\n\nexport const ParameterTextInput = parameterWrapped()(ParameterTextInputC);","import * as React from 'react';\nimport { InjectedProps, parameterWrapped } from './ElementWrapper';\nimport { Colors } from '@blueprintjs/core';\nimport { NumberParameter } from 'rabbitcontrol';\nimport { NumberDefinition } from 'rabbitcontrol';\nimport { isBuffer } from 'util';\n\ninterface Props {\n    style?: React.CSSProperties;\n    label?: string;\n    labelDisabled?: boolean;\n    labelWidth?: number;\n    large?: boolean;\n    fixedNumber?: number;\n    defaultValue?: any;\n};\n\ninterface State {\n};\n\nexport class ParameterTextWithLabelC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n        };\n    }    \n\n    render() {\n\n        const param = this.props.parameter;\n        let unit = \"\";\n        let value = this.props.defaultValue;\n        let label = this.props.label;\n\n        if (param) {\n            label = param.label;\n        }\n        \n        if (this.props.value !== undefined && this.props.value !== null) {\n            value = this.props.value as string;\n        }\n\n        if (param instanceof NumberParameter) {\n            const td = (param.typeDefinition as NumberDefinition);\n\n            if (this.props.fixedNumber !== undefined) {\n                value = this.props.value.toFixed(this.props.fixedNumber) as string;\n            }\n\n            if (td.unit) {\n                unit = (param.typeDefinition as NumberDefinition).unit as string;\n                value += \" \" + unit;\n            }\n\n            if (td.maximum && td.minimum) {\n                if (param.value < td.minimum || param.value > td.maximum) {\n                    value = \"Err\";\n                }\n            }\n            \n        }\n\n        return (\n            \n            <section style={this.props.style}>\n                \n                <div style={{                    \n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"space-between\",\n                    alignItems: \"center\",\n                    margin: \"1px 0px 2px 0px\",\n                }}>\n\n                    <div style={{\n                        width: this.props.labelDisabled ? 0 : (this.props.labelWidth ? this.props.labelWidth : undefined),\n                        // fontSize: this.props.large ? \"large\" : \"normal\",\n                        color: this.props.disabled ? Colors.GRAY1 : Colors.LIGHT_GRAY5,\n                    }}>\n                        {this.props.labelDisabled ? \"\" : label}\n                    </div>\n\n\n                    <div style={{\n                        marginLeft: this.props.labelDisabled ? 0 : \"6px\",\n                        background: Colors.DARK_GRAY1,\n                        flex: \"content\",\n                        flexGrow: 1,\n                    }}>\n\n                        <div style={{\n                            margin: this.props.labelDisabled ? 0 : \"0px 0px 0px 6px\",\n                            // fontSize: this.props.large ? \"large\" : \"normal\",\n                            color: this.props.disabled ? Colors.GRAY1 : Colors.LIGHT_GRAY5,\n                            whiteSpace: \"nowrap\",\n                        }}>\n                            {value}\n                        </div>\n                    </div>\n\n                </div>\n\n            </section>\n        );\n    }\n};\n\nexport const ParameterTextWithLabel = parameterWrapped({ignoreReadonly:true})(ParameterTextWithLabelC);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { Slider, ISliderProps } from '@blueprintjs/core';\nimport { RcpTypes, Vector3, Vector3F32Definition } from 'rabbitcontrol';\nimport Measure from 'react-measure';\n\ninterface Props extends ISliderProps {\n    continuous?: boolean;\n};\n\ninterface State {\n    dimensions: {\n        width: -1,\n        height: -1\n    }; \n};\n\nexport class ParameterSlider3C extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n            dimensions: {\n                width: -1,\n                height: -1\n            },\n        };\n    }    \n\n    handleChangeX = (value: number) => {\n\n        const vec3 = (this.props.value as Vector3).clone();\n        vec3.x = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec3);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(0);\n        }\n    }\n    handleChangeY = (value: number) => {\n\n        const vec3 = (this.props.value as Vector3).clone();\n        vec3.y = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec3);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(0);\n        }\n    }\n    handleChangeZ = (value: number) => {\n\n        const vec3 = (this.props.value as Vector3).clone();\n        vec3.z = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec3);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(0);\n        }\n    }\n\n    handleRelease = (value: number) => {\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as Vector3;\n        let step = new Vector3(1, 1, 1);\n        let isFloat:boolean;\n        let min:Vector3;\n        let max:Vector3;  \n        let readOnly:boolean|undefined;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;\n            const numdef = param.typeDefinition as Vector3F32Definition;\n            if (numdef !== undefined && \n                numdef.minimum !== undefined && \n                numdef.maximum !== undefined)\n            {\n                min = numdef.minimum;\n                max = numdef.maximum;\n\n                const valueRange = numdef.maximum.clone().sub(numdef.minimum);\n                    \n                isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR2F32 ||\n                                param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR3F32 ||\n                                param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR4F32;\n\n                if (numdef.multipleof) {\n                    step = numdef.multipleof;\n                } else if (isFloat) {\n                    if (this.state !== undefined && this.state.dimensions !== undefined) {                        \n                        step.x = valueRange.x > 0 && this.state.dimensions.width > 0 ? valueRange.x / this.state.dimensions.width : 1;\n                        step.y = valueRange.y > 0 && this.state.dimensions.width > 0 ? valueRange.y / this.state.dimensions.width : 1;\n                        step.z = valueRange.z > 0 && this.state.dimensions.width > 0 ? valueRange.z / this.state.dimensions.width : 1;\n                    }\n                }\n            }\n        }\n\n        return (        \n            <Measure\n                onResize={(contentRect) => {\n                    this.setState({ dimensions: contentRect.entry })\n                }}\n            >\n            {({ measureRef }) =>\n                <div ref={measureRef}>\n                    <Slider\n                        {...this.props}\n                        value={value ? value.x : 0}\n                        min={min.x}\n                        max={max.x}\n                        stepSize={step.x}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max.x}\n                        onChange={this.handleChangeX}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />\n                    <Slider\n                        {...this.props}\n                        value={value ? value.y : 0}\n                        min={min.y}\n                        max={max.y}\n                        stepSize={step.y}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max.y}\n                        onChange={this.handleChangeY}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />\n                    <Slider\n                        {...this.props}\n                        value={value ? value.z : 0}\n                        min={min.z}\n                        max={max.z}\n                        stepSize={step.z}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max.z}\n                        onChange={this.handleChangeZ}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />      \n                </div>\n            }\n            </Measure>      \n        );\n    }\n\n    private renderLabel = (val: number) => {\n        const param = this.props.parameter\n        const value = val.toFixed(2); // fixme for small numbers!\n        let unit;\n        if (param) {\n            unit = (param.typeDefinition as Vector3F32Definition).unit\n        }\n        \n        return <div style={{whiteSpace: \"nowrap\"}}>{unit ? `${value} ${unit}`: value}</div>\n    }\n};\n\nexport const ParameterSlider3 = parameterWrapped()(ParameterSlider3C);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { NumericInput, INumericInputProps, Position, Intent } from '@blueprintjs/core';\nimport { RcpTypes, Vector3, Vector3F32Definition } from 'rabbitcontrol';\n\ninterface Props extends INumericInputProps {\n};\n\ninterface State {\n};\n\nexport class ParameterNumericInput3C extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {        \n        };\n    }    \n\n    handleChangeX = (value: number, valueAsString: string) => {\n\n        const vec = (this.props.value as Vector3).clone();\n        vec.x = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n    handleChangeY = (value: number, valueAsString: string) => {\n\n        const vec = (this.props.value as Vector3).clone();\n        vec.y = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n    handleChangeZ = (value: number, valueAsString: string) => {\n\n        const vec = (this.props.value as Vector3).clone();\n        vec.z = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as Vector3;\n        let step = new Vector3(1, 1, 1);\n        let isFloat:boolean|undefined;\n        let min:Vector3|undefined;\n        let max:Vector3|undefined; \n        let readOnly:boolean|undefined;\n        let intent:Intent = Intent.NONE;\n\n        const param = this.props.parameter;\n        if (param) {\n\n            readOnly = param.readonly;\n\n            isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR2F32 ||\n                        param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR3F32 ||\n                        param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR4F32;\n\n            const numdef = param.typeDefinition as Vector3F32Definition;\n\n            if (numdef !== undefined) {\n\n                if (numdef.minimum !== undefined && \n                    numdef.maximum !== undefined)\n                {\n\n                    if (numdef.minimum.x < numdef.maximum.x &&\n                        numdef.minimum.y < numdef.maximum.y &&\n                        numdef.minimum.z < numdef.maximum.z)\n                    {\n                        min = numdef.minimum;\n                        max = numdef.maximum;\n                    } else {\n                        // error on min/max\n                        console.error(\"NumberInput: minimum >= maximum\");                \n                        intent = Intent.DANGER;\n                    }\n                }\n\n                if (numdef.multipleof) {\n                    step = numdef.multipleof;\n                } else if (isFloat) {\n                    step.x = 0.1;\n                    step.y = 0.1;\n                    step.z = 0.1;\n                }\n            }\n        }\n\n        return (\n            <div>\n                <NumericInput\n                    {...this.props}\n                    value={value ? value.x : 0}\n                    min={min ? min.x : undefined}\n                    max={max ? max.x : undefined}\n                    stepSize={step.x}\n                    minorStepSize={isFloat ? 0.1 : 1}\n                    onValueChange={this.handleChangeX}\n                    disabled={readOnly === true}\n                    selectAllOnFocus={true}\n                    buttonPosition={Position.RIGHT}\n                    placeholder={\"-\"}\n                    intent={intent}\n                />\n                <NumericInput\n                    {...this.props}\n                    value={value ? value.y : 0}\n                    min={min ? min.y : undefined}\n                    max={max ? max.y : undefined}\n                    stepSize={step.y}\n                    minorStepSize={isFloat ? 0.1 : 1}\n                    onValueChange={this.handleChangeY}\n                    disabled={readOnly === true}\n                    selectAllOnFocus={true}\n                    buttonPosition={Position.RIGHT}\n                    placeholder={\"-\"}\n                    intent={intent}\n                />\n                <NumericInput\n                    {...this.props}\n                    value={value ? value.z : 0}\n                    min={min ? min.z : undefined}\n                    max={max ? max.z : undefined}\n                    stepSize={step.z}\n                    minorStepSize={isFloat ? 0.1 : 1}\n                    onValueChange={this.handleChangeZ}\n                    disabled={readOnly === true}\n                    selectAllOnFocus={true}\n                    buttonPosition={Position.RIGHT}\n                    placeholder={\"-\"}\n                    intent={intent}\n                />\n            </div>\n        );\n    }\n};\n\nexport const ParameterNumericInput3 = parameterWrapped()(ParameterNumericInput3C);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { Slider, ISliderProps } from '@blueprintjs/core';\nimport { RcpTypes, Vector3, Vector3F32Definition, Vector2, Vector2F32Definition } from 'rabbitcontrol';\nimport Measure from 'react-measure';\n\ninterface Props extends ISliderProps {\n    continuous?: boolean;\n};\n\ninterface State {\n    dimensions: {\n        width: -1,\n        height: -1\n    }; \n};\n\nexport class ParameterSlider2C extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n            dimensions: {\n                width: -1,\n                height: -1\n            },\n        };\n    }    \n\n    handleChangeX = (value: number) => {\n\n        const vec = (this.props.value as Vector2).clone();\n        vec.x = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(0);\n        }\n    }\n    handleChangeY = (value: number) => {\n\n        const vec = (this.props.value as Vector2).clone();\n        vec.y = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(0);\n        }\n    }\n\n    handleRelease = (value: number) => {\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as Vector2;\n        let step = new Vector2(1, 1);\n        let isFloat:boolean;\n        let min:Vector2;\n        let max:Vector2;  \n        let readOnly:boolean|undefined;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;\n            const numdef = param.typeDefinition as Vector2F32Definition;\n            if (numdef !== undefined && \n                numdef.minimum !== undefined && \n                numdef.maximum !== undefined)\n            {\n                min = numdef.minimum;\n                max = numdef.maximum;\n\n                const valueRange = numdef.maximum.clone().sub(numdef.minimum);\n                    \n                isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR2F32 ||\n                                param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR3F32 ||\n                                param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR4F32;\n\n                if (numdef.multipleof) {\n                    step = numdef.multipleof;\n                } else if (isFloat) {\n                    if (this.state !== undefined && this.state.dimensions !== undefined) {                        \n                        step.x = valueRange.x > 0 && this.state.dimensions.width > 0 ? valueRange.x / this.state.dimensions.width : 1;\n                        step.y = valueRange.y > 0 && this.state.dimensions.width > 0 ? valueRange.y / this.state.dimensions.width : 1;\n                    }\n                }\n            }\n        }\n\n        return (        \n            <Measure\n                onResize={(contentRect) => {\n                    this.setState({ dimensions: contentRect.entry })\n                }}\n            >\n            {({ measureRef }) =>\n                <div ref={measureRef}>\n                    <Slider\n                        {...this.props}\n                        value={value ? value.x : 0}\n                        min={min.x}\n                        max={max.x}\n                        stepSize={step.x}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max.x}\n                        onChange={this.handleChangeX}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />\n                    <Slider\n                        {...this.props}\n                        value={value ? value.y : 0}\n                        min={min.y}\n                        max={max.y}\n                        stepSize={step.y}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max.y}\n                        onChange={this.handleChangeY}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />    \n                </div>\n            }\n            </Measure>      \n        );\n    }\n\n    private renderLabel = (val: number) => {\n        const param = this.props.parameter\n        const value = val.toFixed(2); // fixme for small numbers!\n        let unit;\n        if (param) {\n            unit = (param.typeDefinition as Vector3F32Definition).unit\n        }\n        \n        return <div style={{whiteSpace: \"nowrap\"}}>{unit ? `${value} ${unit}`: value}</div>\n    }\n};\n\nexport const ParameterSlider2 = parameterWrapped()(ParameterSlider2C);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { NumericInput, INumericInputProps, Position, Intent } from '@blueprintjs/core';\nimport { RcpTypes, Vector3, Vector3F32Definition, Vector2 } from 'rabbitcontrol';\n\ninterface Props extends INumericInputProps {\n};\n\ninterface State {\n};\n\nexport class ParameterNumericInput2C extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {        \n        };\n    }    \n\n    handleChangeX = (value: number, valueAsString: string) => {\n\n        const vec = (this.props.value as Vector2).clone();\n        vec.x = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n    handleChangeY = (value: number, valueAsString: string) => {\n\n        const vec = (this.props.value as Vector2).clone();\n        vec.y = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as Vector2;\n        let step = new Vector2(1, 1);\n        let isFloat:boolean|undefined;\n        let min:Vector2|undefined;\n        let max:Vector2|undefined; \n        let readOnly:boolean|undefined;\n        let intent:Intent = Intent.NONE;\n\n        const param = this.props.parameter;\n        if (param) {\n\n            readOnly = param.readonly;\n\n            isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR2F32 ||\n                        param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR3F32 ||\n                        param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR4F32;\n\n            const numdef = param.typeDefinition as Vector3F32Definition;\n\n            if (numdef !== undefined) {\n\n                if (numdef.minimum !== undefined && \n                    numdef.maximum !== undefined)\n                {\n\n                    if (numdef.minimum.x < numdef.maximum.x &&\n                        numdef.minimum.y < numdef.maximum.y)\n                    {\n                        min = numdef.minimum;\n                        max = numdef.maximum;\n                    } else {\n                        // error on min/max\n                        console.error(\"NumberInput: minimum >= maximum\");                \n                        intent = Intent.DANGER;\n                    }\n                }\n\n                if (numdef.multipleof) {\n                    step = numdef.multipleof;\n                } else if (isFloat) {\n                    step.x = 0.1;\n                    step.y = 0.1;\n                }\n            }\n        }\n\n        return (\n            <div>\n                <NumericInput\n                    {...this.props}\n                    value={value ? value.x : 0}\n                    min={min ? min.x : undefined}\n                    max={max ? max.x : undefined}\n                    stepSize={step.x}\n                    minorStepSize={isFloat ? 0.1 : 1}\n                    onValueChange={this.handleChangeX}\n                    disabled={readOnly === true}\n                    selectAllOnFocus={true}\n                    buttonPosition={Position.RIGHT}\n                    placeholder={\"-\"}\n                    intent={intent}\n                />\n                <NumericInput\n                    {...this.props}\n                    value={value ? value.y : 0}\n                    min={min ? min.y : undefined}\n                    max={max ? max.y : undefined}\n                    stepSize={step.y}\n                    minorStepSize={isFloat ? 0.1 : 1}\n                    onValueChange={this.handleChangeY}\n                    disabled={readOnly === true}\n                    selectAllOnFocus={true}\n                    buttonPosition={Position.RIGHT}\n                    placeholder={\"-\"}\n                    intent={intent}\n                />\n            </div>\n        );\n    }\n};\n\nexport const ParameterNumericInput2 = parameterWrapped()(ParameterNumericInput2C);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { Slider, ISliderProps } from '@blueprintjs/core';\nimport { RcpTypes, Vector3, Vector3F32Definition, Vector4, Vector4F32Definition } from 'rabbitcontrol';\nimport Measure from 'react-measure';\n\ninterface Props extends ISliderProps {\n    continuous?: boolean;\n};\n\ninterface State {\n    dimensions: {\n        width: -1,\n        height: -1\n    }; \n};\n\nexport class ParameterSlider4C extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n            dimensions: {\n                width: -1,\n                height: -1\n            },\n        };\n    }    \n\n    handleChangeX = (value: number) => {\n\n        const vec = (this.props.value as Vector4).clone();\n        vec.x = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(0);\n        }\n    }\n    handleChangeY = (value: number) => {\n\n        const vec = (this.props.value as Vector4).clone();\n        vec.y = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(0);\n        }\n    }\n    handleChangeZ = (value: number) => {\n\n        const vec = (this.props.value as Vector4).clone();\n        vec.z = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(0);\n        }\n    }\n    handleChangeT = (value: number) => {\n\n        const vec = (this.props.value as Vector4).clone();\n        vec.t = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(0);\n        }\n    }\n\n    handleRelease = (value: number) => {\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as Vector4;\n        let step = new Vector4(1, 1, 1, 1);\n        let isFloat:boolean;\n        let min:Vector4;\n        let max:Vector4;  \n        let readOnly:boolean|undefined;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;\n            const numdef = param.typeDefinition as Vector4F32Definition;\n            if (numdef !== undefined && \n                numdef.minimum !== undefined && \n                numdef.maximum !== undefined)\n            {\n                min = numdef.minimum;\n                max = numdef.maximum;\n\n                const valueRange = numdef.maximum.clone().sub(numdef.minimum);\n                    \n                isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR2F32 ||\n                                param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR3F32 ||\n                                param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR4F32;\n\n                if (numdef.multipleof) {\n                    step = numdef.multipleof;\n                } else if (isFloat) {\n                    if (this.state !== undefined && this.state.dimensions !== undefined) {                        \n                        step.x = valueRange.x > 0 && this.state.dimensions.width > 0 ? valueRange.x / this.state.dimensions.width : 1;\n                        step.y = valueRange.y > 0 && this.state.dimensions.width > 0 ? valueRange.y / this.state.dimensions.width : 1;\n                        step.z = valueRange.z > 0 && this.state.dimensions.width > 0 ? valueRange.z / this.state.dimensions.width : 1;\n                        step.t = valueRange.t > 0 && this.state.dimensions.width > 0 ? valueRange.t / this.state.dimensions.width : 1;\n                    }\n                }\n            }\n        }\n\n        return (        \n            <Measure\n                onResize={(contentRect) => {\n                    this.setState({ dimensions: contentRect.entry })\n                }}\n            >\n            {({ measureRef }) =>\n                <div ref={measureRef}>\n                    <Slider\n                        {...this.props}\n                        value={value ? value.x : 0}\n                        min={min.x}\n                        max={max.x}\n                        stepSize={step.x}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max.x}\n                        onChange={this.handleChangeX}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />\n                    <Slider\n                        {...this.props}\n                        value={value ? value.y : 0}\n                        min={min.y}\n                        max={max.y}\n                        stepSize={step.y}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max.y}\n                        onChange={this.handleChangeY}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />\n                    <Slider\n                        {...this.props}\n                        value={value ? value.z : 0}\n                        min={min.z}\n                        max={max.z}\n                        stepSize={step.z}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max.z}\n                        onChange={this.handleChangeZ}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    /> \n                    <Slider\n                        {...this.props}\n                        value={value ? value.t : 0}\n                        min={min.t}\n                        max={max.t}\n                        stepSize={step.t}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max.t}\n                        onChange={this.handleChangeT}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />      \n                </div>\n            }\n            </Measure>      \n        );\n    }\n\n    private renderLabel = (val: number) => {\n        const param = this.props.parameter\n        const value = val.toFixed(2); // fixme for small numbers!\n        let unit;\n        if (param) {\n            unit = (param.typeDefinition as Vector3F32Definition).unit\n        }\n        \n        return <div style={{whiteSpace: \"nowrap\"}}>{unit ? `${value} ${unit}`: value}</div>\n    }\n};\n\nexport const ParameterSlider4 = parameterWrapped()(ParameterSlider4C);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { NumericInput, INumericInputProps, Position, Intent } from '@blueprintjs/core';\nimport { RcpTypes, Vector3, Vector3F32Definition, Vector4, Vector4F32Definition } from 'rabbitcontrol';\n\ninterface Props extends INumericInputProps {\n};\n\ninterface State {\n};\n\nexport class ParameterNumericInput4C extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {        \n        };\n    }    \n\n    handleChangeX = (value: number, valueAsString: string) => {\n\n        const vec = (this.props.value as Vector4).clone();\n        vec.x = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n    handleChangeY = (value: number, valueAsString: string) => {\n\n        const vec = (this.props.value as Vector4).clone();\n        vec.y = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n    handleChangeZ = (value: number, valueAsString: string) => {\n\n        const vec = (this.props.value as Vector4).clone();\n        vec.z = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n    handleChangeT = (value: number, valueAsString: string) => {\n\n        const vec = (this.props.value as Vector4).clone();\n        vec.t = value;\n\n        if (this.props.handleValue) {\n            this.props.handleValue(vec);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as Vector4;\n        let step = new Vector4(1, 1, 1, 1);\n        let isFloat:boolean|undefined;\n        let min:Vector4|undefined;\n        let max:Vector4|undefined; \n        let readOnly:boolean|undefined;\n        let intent:Intent = Intent.NONE;\n\n        const param = this.props.parameter;\n        if (param) {\n\n            readOnly = param.readonly;\n\n            isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR2F32 ||\n                        param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR3F32 ||\n                        param.typeDefinition.datatype === RcpTypes.Datatype.VECTOR4F32;\n\n            const numdef = param.typeDefinition as Vector4F32Definition;\n\n            if (numdef !== undefined) {\n\n                if (numdef.minimum !== undefined && \n                    numdef.maximum !== undefined)\n                {\n\n                    if (numdef.minimum.x < numdef.maximum.x &&\n                        numdef.minimum.y < numdef.maximum.y &&\n                        numdef.minimum.z < numdef.maximum.z &&\n                        numdef.minimum.t < numdef.maximum.t)\n                    {\n                        min = numdef.minimum;\n                        max = numdef.maximum;\n                    } else {\n                        // error on min/max\n                        console.error(\"NumberInput: minimum >= maximum\");                \n                        intent = Intent.DANGER;\n                    }\n                }\n\n                if (numdef.multipleof) {\n                    step = numdef.multipleof;\n                } else if (isFloat) {\n                    step.x = 0.1;\n                    step.y = 0.1;\n                    step.z = 0.1;\n                    step.t = 0.1;\n                }\n            }\n        }\n\n        return (\n            <div>\n                <NumericInput\n                    {...this.props}\n                    value={value ? value.x : 0}\n                    min={min ? min.x : undefined}\n                    max={max ? max.x : undefined}\n                    stepSize={step.x}\n                    minorStepSize={isFloat ? 0.1 : 1}\n                    onValueChange={this.handleChangeX}\n                    disabled={readOnly === true}\n                    selectAllOnFocus={true}\n                    buttonPosition={Position.RIGHT}\n                    placeholder={\"-\"}\n                    intent={intent}\n                />\n                <NumericInput\n                    {...this.props}\n                    value={value ? value.y : 0}\n                    min={min ? min.y : undefined}\n                    max={max ? max.y : undefined}\n                    stepSize={step.y}\n                    minorStepSize={isFloat ? 0.1 : 1}\n                    onValueChange={this.handleChangeY}\n                    disabled={readOnly === true}\n                    selectAllOnFocus={true}\n                    buttonPosition={Position.RIGHT}\n                    placeholder={\"-\"}\n                    intent={intent}\n                />\n                <NumericInput\n                    {...this.props}\n                    value={value ? value.z : 0}\n                    min={min ? min.z : undefined}\n                    max={max ? max.z : undefined}\n                    stepSize={step.z}\n                    minorStepSize={isFloat ? 0.1 : 1}\n                    onValueChange={this.handleChangeZ}\n                    disabled={readOnly === true}\n                    selectAllOnFocus={true}\n                    buttonPosition={Position.RIGHT}\n                    placeholder={\"-\"}\n                    intent={intent}\n                />\n                <NumericInput\n                    {...this.props}\n                    value={value ? value.t : 0}\n                    min={min ? min.t : undefined}\n                    max={max ? max.t : undefined}\n                    stepSize={step.t}\n                    minorStepSize={isFloat ? 0.1 : 1}\n                    onValueChange={this.handleChangeT}\n                    disabled={readOnly === true}\n                    selectAllOnFocus={true}\n                    buttonPosition={Position.RIGHT}\n                    placeholder={\"-\"}\n                    intent={intent}\n                />\n            </div>\n        );\n    }\n};\n\nexport const ParameterNumericInput4 = parameterWrapped()(ParameterNumericInput4C);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { RangeSlider, IRangeSliderProps, NumberRange } from '@blueprintjs/core';\nimport { NumberDefinition, RcpTypes, Range, RangeDefinition, ValueParameter } from 'rabbitcontrol';\nimport Measure from 'react-measure';\n\ninterface Props extends IRangeSliderProps {\n    continuous?: boolean;\n    rangeValue?: Range;\n};\n\ninterface State {\n    dimensions: {\n        width: -1,\n        height: -1\n    }; \n};\n\nexport class ParameterRangeSliderC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n            dimensions: {\n                width: -1,\n                height: -1\n            },\n        };\n    }    \n\n    handleChange = (value: NumberRange) => {\n        if (this.props.handleValue) {\n            this.props.handleValue(new Range(value[0], value[1]));\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(value);\n        }\n    }\n\n    handleRelease = (value: NumberRange) => {\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        \n        const value = this.props.value as Range;\n        let step = 1;\n        let isFloat:boolean;\n        let min:number;\n        let max:number;\n        let default_value:NumberRange;\n        let readOnly:boolean|undefined;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;\n            const numdef = param.typeDefinition as RangeDefinition;\n            const element_type = numdef.elementType as NumberDefinition;\n            if (numdef !== undefined && \n                element_type.minimum !== undefined && \n                element_type.maximum !== undefined)\n            {\n                min = element_type.minimum;\n                max = element_type.maximum;\n\n                const valueRange = (max - min);                    \n                isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.FLOAT32 ||\n                                param.typeDefinition.datatype === RcpTypes.Datatype.FLOAT64;\n\n                if (element_type.multipleof) {\n                    step = element_type.multipleof;\n                } else if (isFloat) {\n                    if (this.state !== undefined && this.state.dimensions !== undefined) {                        \n                        step = valueRange > 0 && this.state.dimensions.width > 0 ? valueRange / this.state.dimensions.width : 1\n                    }\n                }\n            }\n        }\n\n        return (        \n            <Measure\n                onResize={(contentRect) => {\n                    this.setState({ dimensions: contentRect.entry })\n                }}\n            >\n            {({ measureRef }) =>\n                <div ref={measureRef}>\n                    <RangeSlider\n                        {...this.props}\n                        value={value ? [value.value1, value.value2] : [0, 1]}\n                        min={min}\n                        max={max}\n                        stepSize={step}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max}\n                        onChange={this.handleChange}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />      \n                </div>\n            }\n            </Measure>      \n        );\n    }\n\n    private renderLabel = (val: number) => {\n        const param = this.props.parameter\n        const value = val.toFixed(2);\n        let unit;\n        if (param) {\n            unit = (param.typeDefinition as NumberDefinition).unit\n        }\n\n        return <div style={{whiteSpace: \"nowrap\"}}>{unit ? `${value} ${unit}`: value}</div>\n    }\n};\n\nexport const ParameterRangeSlider = parameterWrapped()(ParameterRangeSliderC);","import { Card } from '@blueprintjs/core';\nimport { BangParameter, BooleanParameter, EnumParameter, GroupParameter, ImageParameter, NumberDefinition, NumberParameter, Parameter, RGBAParameter, RGBParameter, SliderWidget, ValueParameter, Vector3F32Parameter, NumberboxWidget, Vector3F32Definition, Vector3I32Parameter, Vector2I32Parameter, Vector2F32Parameter, Vector2F32Definition, Vector4F32Parameter, Vector4I32Parameter, Vector4F32Definition, Range, RangeParameter, RangeDefinition } from 'rabbitcontrol';\nimport * as React from 'react';\nimport { parameterLabelStyle } from './Globals';\nimport { ParameterButtonC } from './ParameterButton';\nimport { ParameterCheckboxC } from './ParameterCheckbox';\nimport { ParameterColorInputC } from './ParameterColorInput';\nimport { ParameterFoldableGroupC } from './ParameterFoldableGroup';\nimport { ParameterHTMLSelectC } from './ParameterHTMLSelect';\nimport { ParameterNumericInputC } from './ParameterNumberInput';\nimport { ParameterSliderC } from './ParameterSlider';\nimport { ParameterTextInputC } from './ParameterTextInput';\nimport { ParameterTextWithLabelC } from './ParameterTextWithLabel';\nimport { ParameterSlider3C } from './ParameterSlider3';\nimport { ParameterNumericInput3C } from './ParameterNumberInput3';\nimport { ParameterSlider2C } from './ParameterSlider2';\nimport { ParameterNumericInput2C } from './ParameterNumberInput2';\nimport { ParameterSlider4C } from './ParameterSlider4';\nimport { ParameterNumericInput4C } from './ParameterNumberInput4';\nimport { ParameterRangeSliderC } from './ParameterRangeSlider'\n\n\ninterface Props {\n    parameter: Parameter;\n    onSubmitCb: () => void;\n};\n\ninterface State {\n    enabled: boolean;\n    label?: string;\n    description?: string;\n    value: any;  \n    dimensions: {\n        width: -1,\n        height: -1\n    };  \n};\n\nexport default class ParameterWidget extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n\n        let value;\n        if (this.props.parameter instanceof ValueParameter && \n            this.props.parameter.value != null)\n        {\n            value = this.props.parameter.value;\n        }\n\n        this.state = {\n            enabled: true,\n            label: this.props.parameter.label,\n            description: this.props.parameter.description,\n            value: value,\n            dimensions: {\n                width: -1,\n                height: -1\n            }\n        };\n    }\n\n    componentDidMount() {\n\n        // setup callbacks\n        const param = this.props.parameter;\n\n        if (param instanceof ValueParameter) {\n\n            param.addValueChangeListener((p) => {\n                if (p instanceof ValueParameter) {\n                    this.setState({\n                        value: p.value\n                    });\n                }\n            });\n        }\n\n        param.addChangeListener((p) => {\n            this.setState({\n                label: p.label,\n                description: p.description,\n            })\n        });\n    }\n\n    getWidth = () => {\n        return 1;\n    }\n\n    createChildWidget(param: Parameter): any {\n        return <ParameterWidget key={param.id}\n                                parameter={param} \n                                onSubmitCb={this.props.onSubmitCb}/>;\n    }\n\n    renderChildren(parameter: Parameter) {\n        if (parameter instanceof GroupParameter) {\n            return parameter.children.map( (p) => { return this.createChildWidget(p); });\n        }\n    }\n\n    handleValueChange = (value: any) => {\n\n        // set parameter value\n        if (this.props.parameter instanceof ValueParameter) {\n            this.props.parameter.value = value;\n        }\n\n        this.setState({ value: value });\n    }\n\n    handleValueSubmit = (event: any) => {\n        //\n        console.log(\"submit\");\n        if (event && event.preventDefault) {\n            event.preventDefault();\n        }        \n        if (this.props.parameter instanceof ValueParameter) {\n            if (this.props.parameter.setStringValue(this.state.value)) {\n                // call onsubmitcb to update client\n                this.props.onSubmitCb();\n            } else {\n                // set string value failed... \n                console.error(\"could not set stringvalue...\");                \n                this.setState({ value: this.props.parameter.value });\n            }\n        }\n    }\n\n    handleButtonClick = () => {\n        this.props.parameter.setDirty();\n        this.props.onSubmitCb();        \n    }\n\n    renderValue(parameter: Parameter) {\n\n        const widget = parameter.widget;        \n        \n        if (widget instanceof SliderWidget) {\n            console.log(\"SLIDER WIDGET\");\n        } else if (widget instanceof NumberboxWidget) {\n            console.log(\"NUMBERBOX WIDGET\");\n        }\n\n        \n\n        if (parameter instanceof ValueParameter) {\n\n            if (parameter instanceof NumberParameter) {\n\n                const numdef = parameter.typeDefinition as NumberDefinition;\n                if (!(widget instanceof NumberboxWidget) &&\n                    numdef !== undefined && \n                    numdef.minimum !== undefined && \n                    numdef.maximum !== undefined)\n                { \n                    if (numdef.minimum < numdef.maximum) {\n\n                        return ( \n                            <div>\n                                <div style={parameterLabelStyle}>{parameter.label}</div>\n                                <ParameterSliderC\n                                    {...this.props}\n                                    value={this.state.value}\n                                    handleValue={this.handleValueChange}\n                                    continuous={true}\n                                />\n                            </div>\n                        );\n                    } else {\n                        console.error(\"ParameterWidget: minimum >= maximum\");\n                        return this.defaultWidget();\n                    }\n                } else {\n\n                    // numeric input\n                    return (\n                        <div>\n                            <div style={parameterLabelStyle}>{parameter.label}</div>\n                            <ParameterNumericInputC\n                                {...this.props}\n                                value={this.state.value}\n                                handleValue={this.handleValueChange}\n                            />\n                        </div>\n                    );\n                }\n            }\n            else if (parameter instanceof Vector2F32Parameter ||\n                parameter instanceof Vector2I32Parameter) {\n\n                const def = parameter.typeDefinition as Vector2F32Definition;\n                \n                if (!(widget instanceof NumberboxWidget) &&\n                    def !== undefined && \n                    def.minimum !== undefined && \n                    def.maximum !== undefined)\n                { \n                    if (def.minimum.x < def.maximum.x &&\n                        def.minimum.y < def.maximum.y)\n                    {\n                        return ( \n                            <div>\n                                <div style={parameterLabelStyle}>{parameter.label}</div>\n                                <ParameterSlider2C\n                                    {...this.props}\n                                    value={this.state.value}\n                                    handleValue={this.handleValueChange}\n                                    continuous={true}\n                                />\n                            </div>\n                        );\n                    } else {\n                        console.error(\"ParameterWidget: minimum >= maximum\");\n                        return this.defaultWidget();\n                    }\n                } else {\n                    // numeric input\n                    return (\n                        <div>\n                            <div style={parameterLabelStyle}>{parameter.label}</div>\n                            <ParameterNumericInput2C\n                                {...this.props}\n                                value={this.state.value}\n                                handleValue={this.handleValueChange}\n                            />\n                        </div>\n                    );\n                }\n            }\n            else if (parameter instanceof Vector3F32Parameter ||\n                parameter instanceof Vector3I32Parameter) {\n\n                const def = parameter.typeDefinition as Vector3F32Definition;\n                \n                if (!(widget instanceof NumberboxWidget) &&\n                    def !== undefined && \n                    def.minimum !== undefined && \n                    def.maximum !== undefined)\n                { \n                    if (def.minimum.x < def.maximum.x &&\n                        def.minimum.y < def.maximum.y &&\n                        def.minimum.z < def.maximum.z)\n                    {\n                        return ( \n                            <div>\n                                <div style={parameterLabelStyle}>{parameter.label}</div>\n                                <ParameterSlider3C\n                                    {...this.props}\n                                    value={this.state.value}\n                                    handleValue={this.handleValueChange}\n                                    continuous={true}\n                                />\n                            </div>\n                        );\n                    } else {\n                        console.error(\"ParameterWidget: minimum >= maximum\");\n                        return this.defaultWidget();\n                    }\n                } else {\n                    // numeric input\n                    return (\n                        <div>\n                            <div style={parameterLabelStyle}>{parameter.label}</div>\n                            <ParameterNumericInput3C\n                                {...this.props}\n                                value={this.state.value}\n                                handleValue={this.handleValueChange}\n                            />\n                        </div>\n                    );\n                }\n            }\n            else if (parameter instanceof Vector4F32Parameter ||\n                parameter instanceof Vector4I32Parameter) {\n\n                const def = parameter.typeDefinition as Vector4F32Definition;\n                \n                if (!(widget instanceof NumberboxWidget) &&\n                    def !== undefined && \n                    def.minimum !== undefined && \n                    def.maximum !== undefined)\n                { \n                    if (def.minimum.x < def.maximum.x &&\n                        def.minimum.y < def.maximum.y &&\n                        def.minimum.z < def.maximum.z &&\n                        def.minimum.t < def.maximum.t)\n                    {\n                        return ( \n                            <div>\n                                <div style={parameterLabelStyle}>{parameter.label}</div>\n                                <ParameterSlider4C\n                                    {...this.props}\n                                    value={this.state.value}\n                                    handleValue={this.handleValueChange}\n                                    continuous={true}\n                                />\n                            </div>\n                        );\n                    } else {\n                        console.error(\"ParameterWidget: minimum >= maximum\");\n                        return this.defaultWidget();\n                    }\n                } else {\n                    // numeric input\n                    return (\n                        <div>\n                            <div style={parameterLabelStyle}>{parameter.label}</div>\n                            <ParameterNumericInput4C\n                                {...this.props}\n                                value={this.state.value}\n                                handleValue={this.handleValueChange}\n                            />\n                        </div>\n                    );\n                }\n            }\n            else if (parameter instanceof BooleanParameter) {\n                return (\n                    <div>\n                        <div style={parameterLabelStyle}>{parameter.label}</div>\n                        <br/>\n                        <ParameterCheckboxC\n                            {...this.props}\n                            value={this.state.value}\n                            handleValue={this.handleValueChange}\n                        />\n                    </div>\n                );\n            } \n            else if (parameter instanceof RGBAParameter ||\n                     parameter instanceof RGBParameter)\n            {\n                return (\n                    <div>\n                        <div style={parameterLabelStyle}>{parameter.label}</div>\n                        <br/>\n                        <ParameterColorInputC\n                            {...this.props}\n                            value={this.state.value}\n                            handleValue={this.handleValueChange}\n                        />\n                    </div>\n                );\n            } \n            else if (parameter instanceof EnumParameter) {\n                return (\n                    <div>\n                        <div style={parameterLabelStyle}>{parameter.label}</div>\n                        <br/>\n                        <ParameterHTMLSelectC\n                            {...this.props}\n                            value={this.state.value}\n                            handleValue={this.handleValueChange}\n                        />\n                    </div>\n                );\n            }\n            else if (parameter instanceof ImageParameter) {\n                \n                const blob = new Blob([parameter.value]);\n                const url = window.URL.createObjectURL(blob);\n\n                return (\n                    <div>\n                        <div style={parameterLabelStyle}>{parameter.label}</div>\n                        <br/>\n                        <img src={url} alt=\"IMAGE\" height={200}/>\n                    </div>\n                );\n            }\n            else if (parameter instanceof RangeParameter) {\n                \n                const Range = parameter.value;\n\n                return (\n                    <div>\n                        <div style={parameterLabelStyle}>{parameter.label}</div>\n                        <br/>\n                        <ParameterRangeSliderC                        \n                            {...this.props}\n                            value={this.state.value}\n                            handleValue={this.handleValueChange}\n                        />\n                    </div>\n                );\n            }\n            else {\n                // everything else...\n                return (\n                    <div>\n                        <div style={parameterLabelStyle}>{parameter.label}</div>\n                        <br/>\n                        <ParameterTextInputC\n                            {...this.props}\n                            value={this.state.value}\n                            handleValue={this.handleValueChange}\n                        />\n                    </div>\n                );\n            }\n\n            // end: value parameter\n        } else if (parameter instanceof GroupParameter) {\n            return (\n                <ParameterFoldableGroupC\n                    {...this.props}\n                    value={this.state.value}\n                    handleValue={this.handleValueChange}\n                >\n                    {this.renderChildren(parameter)}\n                </ParameterFoldableGroupC>\n            );\n        } else if (parameter instanceof BangParameter) {\n            return (\n                <ParameterButtonC\n                    {...this.props}\n                    value={this.state.value}\n                    handleValue={this.handleButtonClick}\n                />\n            );\n        }\n\n        return;\n    }\n\n    render() {\n\n        const parameter = this.props.parameter;\n\n        if (!parameter) {\n            console.error(\"no parameter\");            \n            return (\n                <div>no parameter</div>\n            );\n        }\n\n        return (        \n            <div style={{\n                marginTop: 20,\n                marginBottom: 0,\n            }}>\n                <Card interactive={false}>\n                    {this.renderValue(parameter)}                    \n                </Card>\n            </div>\n        );\n    }\n\n    private defaultWidget() {\n        return (\n            <ParameterTextWithLabelC\n                {...this.props}\n                value={this.state.value.toString()}                \n            />\n        );\n    }\n\n}","import * as React from 'react';\nimport ParameterWidget from './ParameterWidget'\nimport { Alert, Intent, InputGroup, ControlGroup, Text, Colors } from '@blueprintjs/core';\nimport { Parameter, Client, WebSocketClientTransporter } from 'rabbitcontrol';\nimport { SSL_INFO_TEXT, SSL_INFO_TEXT_FIREFOX } from './Globals';\n\ntype Props = {\n};\n\ntype State = {\n    isConnected: boolean;\n    error?: string;\n    client?: Client;\n    host: string;\n    port: number;\n    parameters: Parameter[];\n    serverVersion: string;\n    serverApplicationId: string;\n};\n\nexport default class ConnectionDialog extends React.Component<Props, State> {\n    \n    private addTimer?: number;\n    private removeTimer?: number;\n    private myParameters: Parameter[] = [];\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            isConnected: false,\n            host: 'localhost',\n            port: 10000,\n            parameters: [],\n            serverVersion: \"\",\n            serverApplicationId: \"\"\n        };\n    }\n\n    updateClient = () => {\n        if (this.state.client) {\n            this.state.client.update();\n        }\n    }\n\n    createParameterWidget(parameter: Parameter) {\n        return <ParameterWidget key={parameter.id}\n                                parameter={parameter} \n                                onSubmitCb={this.updateClient}/>;\n    }\n\n    createWidgets(parameter: Parameter[]) {\n        return parameter.map( (param) => { return this.createParameterWidget(param); });\n    }\n\n    setHost = (e: any) => {\n        this.setState({\n            host: e.currentTarget.value as string,\n        });\n    }\n\n    setPort = (e: any) => {\n        this.setState({\n            port: parseInt(e.currentTarget.value, 10),\n        });\n    }\n\n    render() {\n\n        const host = this.state.host;\n        const port = this.state.port;\n\n        return <section>\n\n            {this.createWidgets(this.state.parameters)}\n\n            <div style={{\n                color: Colors.GRAY1, \n                fontSize: \"0.8em\",\n                marginTop: 5,\n                marginLeft: 2,\n            }}>\n                {this.state.serverApplicationId !== \"\" ? `connected to: ${this.state.serverApplicationId} - ` : \"\"}{this.state.serverVersion !== \"\" ? `rcp: ${this.state.serverVersion}` : \"\"}\n            </div>\n\n            <Alert\n                className={\"bp3-dark\"}\n                confirmButtonText=\"Connect\"\n                icon=\"offline\"\n                intent={Intent.NONE}\n                isOpen={this.state.isConnected !== true }\n                onConfirm={this.handleAlertConfirm}\n            >\n                <Text><strong>Connect to a RabbitControl server</strong></Text>\n                <br/>\n                <br/>\n                <ControlGroup style={{alignItems: \"center\"}}>\n                    <Text>Host:&nbsp;</Text>\n                    <InputGroup\n                        value={host}\n                        type=\"text\"\n                        onChange={this.setHost}\n                    />\n                </ControlGroup>\n                <br/>\n                <ControlGroup style={{alignItems: \"center\"}}>\n                    <Text>Port:&nbsp;</Text>                    \n                    <InputGroup\n                        value={port.toFixed(0)}\n                        min={1024}\n                        max={65535}\n                        type=\"number\"\n                        onChange={this.setPort}\n                    />\n                </ControlGroup>\n                <br/>\n                <div>\n                    {this.state.error ? this.state.error : undefined}\n                    {this.returnSSLInfo()}\n                </div>\n\n            </Alert>\n        \n        </section>;\n    }\n\n    private returnSSLInfo() {\n        const isSSL = document.location ? document.location.toString().startsWith(\"https\") : false;\n        const isFirefox = navigator.userAgent.indexOf(\"Firefox\") != -1;\n\n        if (isSSL && isFirefox) {\n            return (\n                <div>\n                    <br/>\n                    {SSL_INFO_TEXT}\n                    <br/><br/>\n                    {SSL_INFO_TEXT_FIREFOX}\n                </div>\n            );\n        } else if (isSSL) {\n            return (\n                <div>\n                    <br/>\n                    {SSL_INFO_TEXT}\n                </div>\n            );\n        }\n    }\n\n    private handleAlertConfirm = () => {\n\n        this.setState({\n            error: undefined\n        });\n\n        if (this.state.host !== undefined && \n            this.state.host !== \"\" &&\n            !isNaN(this.state.port))\n        {\n            this.doConnect();\n        }\n    }\n\n    private resetUI() {\n\n        this.stopTimers();\n\n        this.myParameters = [];\n\n        this.setState({\n            isConnected: false, \n            client: undefined, \n            parameters: this.myParameters,\n            serverVersion: \"\",\n            serverApplicationId: \"\",\n        });\n    }\n\n    private doDisconnect = () => {\n        \n        const client = this.state.client;\n\n        if (client) {\n            // clear callbacks\n            // TODO: do this in client\n            client.connected = undefined;\n            client.disconnected = undefined;            \n            client.onError = undefined;\n            client.parameterAdded = undefined;\n            client.parameterRemoved = undefined;\n\n            // dispose client\n            client.dispose();\n        }\n\n        this.resetUI();\n    }\n\n    private doConnect = () => {\n        Client.VERBOSE = true\n        const client = new Client(new WebSocketClientTransporter())\n\n        const { connected, disconnected, parameterAdded, parameterRemoved, onError, onServerInfo } = this;\n        Object.assign(client, { connected, disconnected, parameterAdded, parameterRemoved, onError, onServerInfo });\n\n        const host = this.state.host;\n        const port = this.state.port;\n\n        this.setState({\n            client, error: undefined\n        });\n\n        client.connect(host, port);\n    }\n\n    /**\n     * client callbacks - socket\n     */\n    private connected = () => {\n        this.setState({\n            isConnected: true,\n        });\n        console.log(\"ConnectionDialog connected!\");\n    }\n\n    private disconnected = (event: CloseEvent) => {\n        console.log(\"ConnectionDialog disconneted: \" + JSON.stringify(event));\n        this.setState({\n            error: `disconnected${event.reason ? \": \" + JSON.stringify(event.reason) : \"\"}`\n        });\n        this.resetUI();\n    }\n\n    private onError = (error: any) => {\n\n        if (error instanceof Error) {\n            console.error(error.message);\n        } else {\n            this.setState({\n                error: error,\n            });\n            this.resetUI();\n        }\n\n    }\n\n    /**\n     * client callbacks info\n     */\n    private onServerInfo = (version: string, applicationId: string) => {\n        this.setState({\n            serverVersion: version,\n            serverApplicationId: applicationId\n        });\n    }\n\n    /**\n     * client callbacks parameter\n     */\n    private parameterAdded = (parameter: Parameter) => {\n\n        if (!parameter.parent) {    \n            const params = this.myParameters.slice();\n            params.push(parameter);\n            this.myParameters = params;\n        }\n\n        // deferer setstate\n        if (this.addTimer !== undefined) {\n            window.clearTimeout(this.addTimer);\n            this.addTimer = undefined;\n        }\n\n        this.addTimer = window.setTimeout(() => {\n            this.setState({\n                parameters: this.myParameters,\n            });\n        }, 100);\n    }\n\n    private parameterRemoved = (parameter: Parameter) => {\n\n        const index = this.myParameters.indexOf(parameter, 0);\n\n        if (index > -1) {\n            this.myParameters.splice(index, 1);\n        }\n        \n        if (this.removeTimer!== undefined) {\n            window.clearTimeout(this.removeTimer);\n            this.removeTimer = undefined;\n        }\n\n        this.removeTimer = window.setTimeout(() => {\n            this.setState({\n                parameters: this.myParameters,\n            });\n        }, 100);\n    }\n\n    /**\n     * \n     */\n    private stopTimers() {\n\n        if (this.addTimer !== undefined) {\n            window.clearTimeout(this.addTimer);\n            this.addTimer = undefined;\n        }\n\n        if (this.removeTimer!== undefined) {\n            window.clearTimeout(this.removeTimer);\n            this.removeTimer = undefined;\n        }\n\n    }\n\n} \n","import React, { Component } from 'react';\nimport './App.css';\nimport ConnectionDialog from './ConnectionDialog';\nimport { Colors } from '@blueprintjs/core';\n\n/*\n  use with local tcp-ts:\n  $ npm link ../rcp-ts\n\n  unlink with:\n  $ npm unlink rabbitcontrol\n  $ npm install\n*/\n\n\ninterface Props {\n};\n\ninterface State {\n  height: number;\n};\n\nclass App extends React.Component<Props, State> {\n\n  static VERBOSE_LOG = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      height: window.innerHeight,\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"did mount!\");    \n    window.addEventListener('resize', this.onWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onWindowResize);\n  }\n\n  onWindowResize = () => {\n    this.setState({ height: window.innerHeight });\n  }\n\n  render() {\n\n    return (\n      <section className={\"bp3-dark\"}>\n\n        <div className=\"App\" \n          style={{\n            margin: \"30px\",\n            marginBottom: \"-30px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minHeight: this.state.height-40\n        }}>\n\n          <ConnectionDialog />\n\n          <div style={{\n            flex: 2\n          }}></div>\n\n          <div style={{\n            marginBottom: 5,\n            marginTop: 20,\n            width: \"100%\",\n            textAlign: \"center\",\n            fontSize: \"0.8em\",\n            color: Colors.GRAY1\n          }}>\n            written by&nbsp;\n            <a style={{\n              color: Colors.GRAY1,\n              textDecoration: \"underline\"\n            }}\n              href=\"https://github.com/rabbitControl/rcp-ts-client\" target=\"#\">\n              i-n-g-o\n            </a>\n            &nbsp;&nbsp;|&nbsp;&nbsp;\n            <a style={{\n              color: Colors.GRAY1,\n              textDecoration: \"underline\"\n            }}\n              href=\"https://rabbitcontrol.github.io/\" target=\"#\">\n              rabbitControl\n            </a>\n            <br/>\n            uses&nbsp;\n            <a style={{\n              color: Colors.GRAY1,\n              textDecoration: \"underline\"\n            }}\n              href=\"https://blueprintjs.com/\">\n              blueprintjs\n            </a>\n          </div>\n        </div>\n\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css/normalize.css'\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css'\nimport '@blueprintjs/core/lib/css/blueprint.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}